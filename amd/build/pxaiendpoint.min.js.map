{"version":3,"file":"pxaiendpoint.min.js","sources":["../src/pxaiendpoint.js"],"sourcesContent":["import $ from \"jquery\";\nimport Ajax from \"core/ajax\";\nimport Notification from \"core/notification\";\n\n/**\n * @typedef TextAreaData\n * @property {string} text\n * @property {string} selectedText\n * @property {number} selectionStart\n * @property {number} selectionEnd\n */\n\n/**\n * @param {number} assignmentId\n * @param {number} submissionId\n * @param {number} stepNumber\n */\nexport const init = (\n    assignmentId,\n    submissionId,\n    stepNumber = 1\n) => {\n\n    const defaultStep = 1;\n\n    /**\n     * @param {number} assignmentId\n     * @param {number} submissionId\n     * @param {number} stepNumber\n     * @constructor\n     */\n    let EventCreator = function (assignmentId, submissionId, stepNumber) {\n        this.currentStep = stepNumber;\n        this.selectedStart = 0;\n        this.selectedEnd = 0;\n        this.assignmentId = assignmentId;\n        this.submissionId = submissionId;\n        this.init();\n    };\n\n    const component = 'assignsubmission_pxaiwriter';\n\n    const eventList = {\n        pageChange: 'page-change',\n        stepTextSave: 'step-save'\n    };\n\n    const selectors = {\n        wrapper: '.assignsubmission_pxaiwriter',\n        doAIMagic: '#pxaiwriter-do-ai-magic',\n        expandSelection: '#pxaiwriter-expand-selection',\n        input: '.pxaiwriter-student-data[data-input-step]',\n    };\n\n    /**\n     * @param {number} step\n     * @return {HTMLTextAreaElement|null}\n     */\n    const getStepInput = (step) => {\n        const element = document.querySelector(`${selectors.input}[data-input-step=\"${step}\"]`);\n        if (element instanceof HTMLTextAreaElement) {\n            return element;\n        }\n        return null;\n    };\n\n    /**\n     * @param {number} step\n     */\n    const copyTextFromPreviousStep = (step) => {\n\n        if (isDebugMode()) {\n            window.console.log(`${component}: Try to copy the text from the previous step to step ${step}...`);\n        }\n\n        const currentStepInput = getStepInput(step);\n        if (currentStepInput === null) {\n            if (isDebugMode()) {\n                window.console.log(`${component}: Cannot find the current step ${step}`);\n            }\n            return;\n        }\n\n        if (currentStepInput.value.trim().length !== 0) {\n            if (isDebugMode()) {\n                window.console.log(`${component}: Cannot copy because the current step (${step}) is not empty`);\n            }\n            return;\n        }\n\n        const previousStep = step - 1;\n        const previousStepInput = getStepInput(previousStep);\n\n        if (previousStepInput === null) {\n            if (isDebugMode()) {\n                window.console.log(`${component}: Cannot find the previous step ${previousStep}`);\n            }\n            return;\n        }\n\n        if (previousStepInput.value.trim().length === 0) {\n            if (isDebugMode()) {\n                window.console.log(`${component}: Cannot copy because the previous step (${step}) is empty`);\n            }\n            return;\n        }\n\n        currentStepInput.value = previousStepInput.value;\n\n        if (isDebugMode()) {\n            window.console.log(`${component}: Copied the text from step ${previousStep} to ${step}`);\n        }\n    };\n\n    /**\n     * @param {string} target\n     */\n    const preventPasting = (target) => {\n        const elements = document.querySelectorAll(target);\n        if (!elements) {\n            return;\n        }\n        for (const element of elements) {\n            element.addEventListener('keydown', (event) => {\n                if (event.ctrlKey && event.key === 'v') {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    return false;\n                }\n            });\n            element.addEventListener('paste', (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n                return false;\n            });\n        }\n    };\n\n    /**\n     * @return {boolean}\n     */\n    const isDebugMode = () => {\n        return !!M?.cfg?.developerdebug;\n    };\n\n    /**\n     * @param {string} text\n     */\n    const setRemainingAttemptText = (text) => {\n        if (!text) {\n            return;\n        }\n        const label = document.querySelector('.remaining-ai-attempts');\n        if (label instanceof HTMLElement) {\n            label.innerHTML = text;\n        }\n    };\n\n    /**\n     * @param {number} step\n     * @return {HTMLTextAreaElement|null}\n     */\n    const getStepTextArea = (step) => {\n        return document.querySelector(`textarea[name=\"pxaiwriter-data-step-${step}\"]`);\n    };\n\n    /**\n     * @param {HTMLElement} element\n     * @return {number}\n     */\n    const getStepNumber = (element) => {\n        const currentStep = Number.parseInt(element?.dataset?.step);\n        if (Number.isNaN(currentStep)) {\n            return 0;\n        }\n        return currentStep;\n    };\n\n    /**\n     * @param {number} step\n     * @return {TextAreaData|null}\n     */\n    const getStepTextAreaData = (step) => {\n        const textArea = getStepTextArea(step);\n        if (!(textArea instanceof HTMLTextAreaElement)) {\n            return null;\n        }\n        return {\n            text: textArea.value,\n            selectedText: textArea.value.substring(textArea.selectionStart, textArea.selectionEnd),\n            selectionStart: textArea.selectionStart,\n            selectionEnd: textArea.selectionEnd\n        };\n    };\n\n    /**\n     * @param {number} step\n     * @return {string}\n     */\n    const getStepInputText = (step) => {\n        return getStepTextArea(step)?.value ?? '';\n    };\n\n    /**\n     * @param {string} text\n     * @return {boolean}\n     */\n    const validateInputText = (text) => {\n        if (!text || text.length === 0) {\n            $('#title-required-warning-modal').modal('show');\n            return false;\n        }\n        return true;\n    };\n\n    const loadingData = () => {\n        $(':button').prop('disabled', true);\n        $('#loader').removeClass('d-none');\n    };\n\n    /**\n     * @param {CustomEvent|Event} event\n     * @return {number}\n     */\n    const getCurrentStepByPageChangeEvent = (event) => {\n        return event?.detail?.currentStep;\n    };\n\n    /**\n     *\n     * @param {CustomEvent|Event} event\n     * @return {number}\n     */\n    const getPreviousStepByPageChangeEvent = (event) => {\n        const currentStep = getCurrentStepByPageChangeEvent(event);\n        const prevStep = event?.detail?.prevStep;\n        return currentStep === prevStep ? 0 : prevStep;\n    };\n\n    /**\n     * @param {string} text\n     * @return {Promise<string|null>}\n     */\n    const getHashCode = async (text) => {\n        if (!text) {\n            return null;\n        }\n        try {\n            const encoder = new TextEncoder();\n            const buffer = encoder.encode(text);\n            const raw = await crypto.subtle.digest(\"SHA-256\", buffer);\n            return Array.from(new Uint8Array(raw)).map(b => b.toString(16).padStart(2, \"0\")).join(\"\");\n        }\n        catch (e) {}\n        return null;\n    };\n\n    /**\n     * @template T\n     * @param {string} methodName\n     * @param {*} parameters\n     * @return {Promise<T>}\n     */\n    const requestAIApi = (methodName, parameters = {}) => {\n        return Ajax.call([\n            {\n                methodname: methodName,\n                args: parameters\n            },\n        ])[0];\n    };\n\n    const api = {\n        /**\n         * @template T\n         * @param {number} assignmentId\n         * @param {number} submissionId\n         * @param {string} text\n         * @param {string} selectedText\n         * @param {number} selectStart\n         * @param {number} step\n         * @return {Promise<T>}\n         */\n        expandText: (assignmentId, submissionId, text, selectedText, selectStart, step = 1) => {\n            return requestAIApi(\n                'assignsubmission_pxaiwriter_expand_ai_text', {\n                assignment_id: assignmentId,\n                submission: submissionId,\n                text: text,\n                selected_text: selectedText,\n                select_start: selectStart,\n                step: step\n            });\n        },\n        /**\n         * @template T\n         * @param {number} assignmentId\n         * @param {number} submissionId\n         * @param {string} text\n         * @param {number} step\n         * @return {Promise<T>}\n         */\n        generateText: (assignmentId, submissionId, text, step = 1) => {\n            return requestAIApi('assignsubmission_pxaiwriter_generate_ai_text', {\n                assignment_id: assignmentId,\n                submission: submissionId,\n                text: text,\n                step: step\n            });\n        },\n        /**\n         * @template T\n         * @param {number} assignmentId\n         * @param {number} submissionId\n         * @param {string} text\n         * @param {number} step\n         * @return {Promise<T>}\n         */\n        recordHistory: (assignmentId, submissionId, text, step = 1) => {\n            return requestAIApi('assignsubmission_pxaiwriter_record_history', {\n                assignment_id: assignmentId,\n                submission: submissionId,\n                text: text,\n                step: step\n            });\n        }\n    };\n\n    EventCreator.prototype.init = function () {\n\n        preventPasting(selectors.input);\n\n        /**\n         * @param {HTMLElement} button\n         */\n        const highlightStepButton = (button) => {\n\n            if (!(button instanceof HTMLElement)) {\n                return;\n            }\n\n            button.classList.add('btn-outline-primary');\n            button.classList.remove('btn-outline-secondary');\n        };\n\n        /**\n         * @param {HTMLElement} button\n         */\n        const blurStepButton = (button) => {\n\n            if (!(button instanceof HTMLElement)) {\n                return;\n            }\n\n            button.classList.remove('btn-outline-primary');\n            button.classList.add('btn-outline-secondary');\n        };\n\n        const wrapper = document.querySelector(selectors.wrapper);\n\n        wrapper?.addEventListener(eventList.pageChange, (e) => {\n\n            if (isDebugMode()) {\n                window.console.log(`${component}: Step switched...`);\n            }\n\n            let step = getCurrentStepByPageChangeEvent(e);\n            const currentStepButton = document.querySelector(`.step-page-button[data-step-number=\"${step}\"]`);\n\n            if (!currentStepButton) {\n                return;\n            }\n\n            const allStepButtons = document.querySelectorAll(`.step-page-button[data-step-number]`);\n            for (const button of allStepButtons) {\n                blurStepButton(button);\n            }\n            highlightStepButton(currentStepButton);\n\n            copyTextFromPreviousStep(step);\n        });\n\n        wrapper?.addEventListener(eventList.pageChange, async (e) => {\n            if (isDebugMode()) {\n                window.console.log(`${component}: Page changed`);\n            }\n\n            const step = getPreviousStepByPageChangeEvent(e);\n            await recordHistory(step);\n        });\n\n        document.querySelector(selectors.expandSelection)?.addEventListener(\"click\", async (e) => {\n\n            if (isDebugMode()) {\n                window.console.log(`${component}: Expand selected text...`);\n            }\n            const step = getStepNumber(e.target);\n            const textData = getStepTextAreaData(step);\n\n            const text = textData.text;\n            const selectedText = textData?.selectedText;\n\n            if (!validateInputText(selectedText)) {\n                if (isDebugMode()) {\n                    window.console.warn(`${component}: No selection detected`);\n                }\n                return;\n            }\n\n            loadingData();\n\n            try {\n                const response = await api.expandText(\n                    assignmentId,\n                    submissionId,\n                    text,\n                    selectedText,\n                    textData.selectionStart\n                );\n                setApiResponseToInput(this.currentStep, response);\n                await dispatchHistoryFromInput();\n            }\n            catch (exception) {\n                await Notification.exception(exception);\n            }\n        });\n\n        document.querySelector(selectors.doAIMagic)?.addEventListener(\"click\", async (e) => {\n\n            if (isDebugMode()) {\n                window.console.log(`${component}: Do AI magic...`);\n            }\n\n            const text = getStepInputText(getStepNumber(e.target));\n\n            if (!validateInputText(text)) {\n                if (isDebugMode()) {\n                    window.console.warn(`${component}: Input text is empty`);\n                }\n                return;\n            }\n\n            loadingData();\n\n            try {\n                const response = await api.generateText(\n                    assignmentId,\n                    submissionId,\n                    text,\n                    defaultStep\n                );\n                setApiResponseToInput(this.currentStep, response);\n                await dispatchHistoryFromInput();\n            }\n            catch (exception) {\n                await Notification.exception(exception);\n            }\n        });\n    };\n\n    /**\n     * @param {number} step\n     * @param {*} response\n     */\n    const setApiResponseToInput = (step, response) => {\n        $(':button').prop('disabled', false);\n        if (response.hasOwnProperty('attempt_text')) {\n            setRemainingAttemptText(response.attempt_text);\n        }\n        if (response.hasOwnProperty('data')) {\n            const textArea = getStepTextArea(step);\n            if (textArea instanceof HTMLTextAreaElement) {\n                textArea.value = response.data;\n                textArea.dispatchEvent(new Event(\"change\"));\n            }\n        }\n        $('#loader').addClass('d-none');\n    };\n\n    /**\n     * @param {number} step\n     * @return {Promise<void>}\n     */\n    const recordHistory = async (step) => {\n        if (isDebugMode()) {\n            window.console.log(`${component}: Saving history...`);\n        }\n\n        if (step < 1) {\n            if (isDebugMode()) {\n                window.console.log(`${component}: Nothing to be save...`);\n            }\n            return;\n        }\n        const text = getStepInputText(step);\n        const response = await api.recordHistory(assignmentId, submissionId, text, step);\n\n        if (isDebugMode() && response.hasOwnProperty(\"checksum\")) {\n            if (!response.checksum) {\n                window.console.log(`${component}: Cannot determine the changes in the data`);\n                return;\n            }\n\n            let textChecksum = await getHashCode(text);\n            textChecksum = textChecksum.toLocaleLowerCase();\n            if (response.checksum === textChecksum) {\n                window.console.log(`${component}: Input text got recorded`);\n            }\n            else {\n                window.console.log(`${component}: Nothing has been changed`);\n            }\n        }\n    };\n\n    const dispatchHistoryFromInput = async () => {\n        const elements = document.querySelectorAll(selectors.input);\n        for (const element of elements) {\n            if (element instanceof HTMLTextAreaElement) {\n                await recordHistory(getStepNumber(element));\n            }\n        }\n    };\n\n    return new EventCreator(assignmentId,  submissionId, stepNumber);\n};\n"],"names":["assignmentId","submissionId","stepNumber","defaultStep","EventCreator","currentStep","selectedStart","selectedEnd","init","component","eventList","pageChange","stepTextSave","selectors","wrapper","doAIMagic","expandSelection","input","getStepInput","step","element","document","querySelector","HTMLTextAreaElement","copyTextFromPreviousStep","isDebugMode","window","console","log","currentStepInput","value","trim","length","previousStep","previousStepInput","preventPasting","target","elements","querySelectorAll","addEventListener","event","ctrlKey","key","preventDefault","stopPropagation","M","_M","cfg","_M$cfg","developerdebug","setRemainingAttemptText","text","label","HTMLElement","innerHTML","getStepTextArea","getStepNumber","Number","parseInt","dataset","_element$dataset","isNaN","getStepTextAreaData","textArea","selectedText","substring","selectionStart","selectionEnd","getStepInputText","_getStepTextArea","validateInputText","modal","loadingData","prop","removeClass","getCurrentStepByPageChangeEvent","detail","_event$detail","getPreviousStepByPageChangeEvent","prevStep","_event$detail2","getHashCode","async","buffer","TextEncoder","encode","raw","crypto","subtle","digest","Array","from","Uint8Array","map","b","toString","padStart","join","e","requestAIApi","methodName","parameters","Ajax","call","methodname","args","api","expandText","selectStart","assignment_id","submission","selected_text","select_start","generateText","recordHistory","prototype","blurStepButton","button","classList","remove","add","currentStepButton","allStepButtons","textData","response","setApiResponseToInput","this","dispatchHistoryFromInput","exception","Notification","warn","hasOwnProperty","attempt_text","data","dispatchEvent","Event","addClass","checksum","textChecksum","toLocaleLowerCase"],"mappings":"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"}