{"version":3,"file":"pxaiendpoint.min.js","sources":["../src/pxaiendpoint.js"],"sourcesContent":["/* eslint-disable camelcase */\nimport $ from \"jquery\";\nimport Ajax from \"core/ajax\";\nimport Notification from \"core/notification\";\n\n/**\n * @typedef {Object} HistoryRecordResponse\n * @property {string} checksum\n * @property {string} timecreated\n * @property {string} timemodified\n */\n\n/**\n * @typedef TextAreaData\n * @property {string} text\n * @property {string} selectedText\n * @property {number} selectionStart\n * @property {number} selectionEnd\n */\n\nclass Api {\n    #requestAIApi(methodName, parameters = {}) {\n        return Ajax.call([\n            {\n                methodname: methodName,\n                args: parameters\n            },\n        ])[0];\n    }\n\n    expandText(assignmentId, submissionId, text, selectedText, selectStart, step = 1) {\n        return this.#requestAIApi(\n            'assignsubmission_pxaiwriter_expand_ai_text', {\n                assignment_id: assignmentId,\n                submission: submissionId,\n                text: text,\n                selected_text: selectedText,\n                select_start: selectStart,\n                step: step\n            });\n    }\n\n    generateText(assignmentId, submissionId, text, step = 1) {\n        return this.#requestAIApi('assignsubmission_pxaiwriter_generate_ai_text', {\n            assignment_id: assignmentId,\n            submission: submissionId,\n            text: text,\n            step: step\n        });\n    }\n\n    recordHistory(assignmentId, submissionId, text, step = 1) {\n        return this.#requestAIApi('assignsubmission_pxaiwriter_record_history', {\n            assignment_id: assignmentId,\n            submission: submissionId,\n            text: text,\n            step: step\n        });\n    }\n}\n\nclass EventCreator {\n    defaultStep = 1;\n\n    properties = {\n        checksumList: {},\n    };\n\n    component = 'assignsubmission_pxaiwriter';\n\n    eventList = {\n        pageChange: 'page-change',\n        stepTextSave: 'step-save'\n    };\n\n    selectors = {\n        wrapper: '.assignsubmission_pxaiwriter',\n        doAIMagic: '#pxaiwriter-do-ai-magic',\n        expandSelection: '#pxaiwriter-expand-selection',\n        input: '.pxaiwriter-student-data[data-input-step]',\n        maxAttemptsErrorMessage: '#assignsubmission_pxaiwriter_max_attempts_message'\n    };\n\n    /**\n     * @param {number} assignmentId\n     * @param {number} submissionId\n     * @param {number} stepNumber\n     * @param {number} maxAttempts\n     * @param {number} attemptsCount\n     * @constructor\n     */\n    constructor(assignmentId, submissionId, stepNumber, maxAttempts, attemptsCount) {\n        this.currentStep = stepNumber;\n        this.maxAttempts = maxAttempts;\n        this.attemptsCount = attemptsCount;\n        this.assignmentId = assignmentId;\n        this.submissionId = submissionId;\n        this.api = new Api();\n        this.init();\n    }\n\n    init() {\n        this.preventPasting(this.selectors.input);\n\n        /**\n         * @param {HTMLElement} button\n         */\n        const highlightStepButton = (button) => {\n            if (!(button instanceof HTMLElement)) {\n                return;\n            }\n            button.classList.add('current');\n        };\n\n        /**\n         * @param {HTMLElement} button\n         */\n        const blurStepButton = (button) => {\n            if (!(button instanceof HTMLElement)) {\n                return;\n            }\n            button.classList.remove('current');\n        };\n\n        const wrapper = document.querySelector(this.selectors.wrapper);\n\n        wrapper?.addEventListener(this.eventList.pageChange, (e) => {\n\n            if (this.isDebugMode()) {\n                window.console.log(`${this.component}: Step switched...`);\n            }\n\n            let step = this.getCurrentStepByPageChangeEvent(e);\n            const currentStepButton = document.querySelector(`.step-page-button[data-step-number=\"${step}\"]`);\n\n            if (!currentStepButton) {\n                return;\n            }\n\n            const allStepButtons = document.querySelectorAll(`.step-page-button[data-step-number]`);\n            for (const button of allStepButtons) {\n                blurStepButton(button);\n            }\n            highlightStepButton(currentStepButton);\n\n            this.copyTextFromPreviousStep(step);\n        });\n\n        wrapper?.addEventListener(this.eventList.pageChange, async (e) => {\n            if (this.isDebugMode()) {\n                window.console.log(`${this.component}: Page changed`);\n            }\n\n            const step = this.getPreviousStepByPageChangeEvent(e);\n            await this.recordHistory(step);\n        });\n\n        document.querySelector(this.selectors.expandSelection)?.addEventListener(\"click\", async (e) => {\n            if (this.isDebugMode()) {\n                window.console.log(`${this.component}: Expand selected text...`);\n            }\n            const step = this.getStepNumber(e.target);\n            const textData = this.getStepTextAreaData(step);\n\n            const text = textData.text;\n            const selectedText = textData?.selectedText;\n\n            if (!this.validateInputText(selectedText)) {\n                if (this.isDebugMode()) {\n                    window.console.warn(`${this.component}: No selection detected`);\n                }\n                return;\n            }\n\n            this.loadingData();\n\n            try {\n                const response = await this.api.expandText(\n                    this.assignmentId,\n                    this.submissionId,\n                    text,\n                    selectedText,\n                    textData.selectionStart\n                );\n                this.setApiResponseToInput(this.currentStep, response);\n                this.updateAIButtonState();\n                await this.dispatchHistoryFromInput();\n            } catch (exception) {\n                await Notification.exception(exception);\n            }\n        });\n\n        document.querySelector(this.selectors.doAIMagic)?.addEventListener(\"click\", async (e) => {\n\n            if (this.isDebugMode()) {\n                window.console.log(`${this.component}: Do AI magic...`);\n            }\n\n            const text = this.getStepInputText(this.getStepNumber(e.target));\n\n            if (!this.validateInputText(text)) {\n                if (this.isDebugMode()) {\n                    window.console.warn(`${this.component}: Input text is empty`);\n                }\n                return;\n            }\n\n            this.loadingData();\n\n            try {\n                const response = await this.api.generateText(\n                    this.assignmentId,\n                    this.submissionId,\n                    text,\n                    this.defaultStep\n                );\n                this.attemptsCount++;\n                this.setApiResponseToInput(this.currentStep, response);\n                this.updateAIButtonState();\n                await this.dispatchHistoryFromInput();\n            } catch (exception) {\n                await Notification.exception(exception);\n            }\n        });\n\n        document.querySelectorAll('textarea.pxaiwriter-student-data').forEach(async (element) => {\n            const step = this.getNumberFromAttribute(element, 'data-input-step');\n            if (step < 1) {\n                return;\n            }\n            const checksum = await this.getHashCode(element.value);\n            this.setChecksumByStep(step, checksum);\n        });\n    }\n\n    /**\n     * @param {number} step\n     * @return {string}\n     */\n    getChecksumByStep(step) {\n        return this.properties.checksumList[step] ?? '';\n    }\n\n    /**\n     * @param {number} step\n     * @param {string} checksum\n     */\n    setChecksumByStep(step, checksum) {\n        this.properties.checksumList[step] = checksum;\n    }\n\n    getNumberFromAttribute(element, attribute) {\n        const value = element?.getAttribute(attribute);\n        if (!value) {\n            return undefined;\n        }\n        const number = Number.parseInt(value);\n        return Number.isNaN(number) ? undefined : number;\n    }\n\n    /**\n     * @param {number} step\n     * @return {HTMLTextAreaElement|null}\n     */\n    getStepInput(step) {\n        const element = document.querySelector(`${this.selectors.input}[data-input-step=\"${step}\"]`);\n        if (element instanceof HTMLTextAreaElement) {\n            return element;\n        }\n        return null;\n    }\n\n    /**\n     * @param {number} step\n     */\n    copyTextFromPreviousStep(step) {\n\n        if (this.isDebugMode()) {\n            window.console.log(`${this.component}: Try to copy the text from the previous step to step ${step}...`);\n        }\n\n        const currentStepInput = this.getStepInput(step);\n        if (currentStepInput === null) {\n            if (this.isDebugMode()) {\n                window.console.log(`${this.component}: Cannot find the current step ${step}`);\n            }\n            return;\n        }\n\n        if (currentStepInput.value.trim().length !== 0) {\n            if (this.isDebugMode()) {\n                window.console.log(`${this.component}: Cannot copy because the current step (${step}) is not empty`);\n            }\n            return;\n        }\n\n        const previousStep = step - 1;\n        const previousStepInput = this.getStepInput(previousStep);\n\n        if (previousStepInput === null) {\n            if (this.isDebugMode()) {\n                window.console.log(`${this.component}: Cannot find the previous step ${previousStep}`);\n            }\n            return;\n        }\n\n        if (previousStepInput.value.trim().length === 0) {\n            if (this.isDebugMode()) {\n                window.console.log(`${this.component}: Cannot copy because the previous step (${step}) is empty`);\n            }\n            return;\n        }\n\n        currentStepInput.value = previousStepInput.value;\n\n        if (this.isDebugMode()) {\n            window.console.log(`${this.component}: Copied the text from step ${previousStep} to ${step}`);\n        }\n    }\n\n    /**\n     * @param {string} target\n     */\n    preventPasting(target) {\n        const elements = document.querySelectorAll(target);\n        if (!elements) {\n            return;\n        }\n        for (const element of elements) {\n            element.addEventListener('keydown', (event) => {\n                if (event.ctrlKey && event.key === 'v') {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    return false;\n                }\n                return true;\n            });\n            element.addEventListener('paste', (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n                return false;\n            });\n        }\n    }\n\n    /**\n     * @return {boolean}\n     */\n    isDebugMode() {\n        return !!M?.cfg?.developerdebug;\n    }\n\n    /**\n     * @param {string} text\n     */\n    setRemainingAttemptText(text) {\n        if (!text) {\n            return;\n        }\n        const label = document.querySelector('.remaining-ai-attempts');\n        if (label instanceof HTMLElement) {\n            label.innerHTML = text;\n        }\n    }\n\n    /**\n     * @param {number} step\n     * @return {HTMLTextAreaElement|null}\n     */\n    getStepTextArea(step) {\n        return document.querySelector(`textarea[name=\"pxaiwriter-data-step-${step}\"]`);\n    }\n\n    /**\n     * @param {HTMLElement} element\n     * @return {number}\n     */\n    getStepNumber(element) {\n        const currentStep = Number.parseInt(element?.dataset?.step);\n        if (Number.isNaN(currentStep)) {\n            return 0;\n        }\n        return currentStep;\n    }\n\n    /**\n     * @param {number} step\n     * @return {TextAreaData|null}\n     */\n    getStepTextAreaData(step) {\n        const textArea = this.getStepTextArea(step);\n        if (!(textArea instanceof HTMLTextAreaElement)) {\n            return null;\n        }\n        return {\n            text: textArea.value,\n            selectedText: textArea.value.substring(textArea.selectionStart, textArea.selectionEnd),\n            selectionStart: textArea.selectionStart,\n            selectionEnd: textArea.selectionEnd\n        };\n    }\n\n    /**\n     * @param {number} step\n     * @return {string}\n     */\n    getStepInputText(step) {\n        return this.getStepTextArea(step)?.value ?? '';\n    }\n\n    /**\n     * @param {string} text\n     * @return {boolean}\n     */\n    validateInputText(text) {\n        if (!text || text.length === 0) {\n            $('#title-required-warning-modal').modal('show');\n            return false;\n        }\n        return true;\n    }\n\n    loadingData() {\n        $(':button').prop('disabled', true);\n        $('#loader').removeClass('d-none');\n    }\n\n    /**\n     * @param {CustomEvent|Event} event\n     * @return {number}\n     */\n    getCurrentStepByPageChangeEvent(event) {\n        return event?.detail?.currentStep;\n    }\n\n    /**\n     *\n     * @param {CustomEvent|Event} event\n     * @return {number}\n     */\n    getPreviousStepByPageChangeEvent(event) {\n        const currentStep = this.getCurrentStepByPageChangeEvent(event);\n        const prevStep = event?.detail?.prevStep;\n        return currentStep === prevStep ? 0 : prevStep;\n    }\n\n    /**\n     * @param {string} text\n     * @return {Promise<string>}\n     */\n    async getHashCode(text) {\n        if (!text) {\n            return null;\n        }\n\n        try {\n            const encoder = new TextEncoder();\n            const buffer = encoder.encode(text);\n            const raw = await crypto.subtle.digest(\"SHA-256\", buffer);\n            return Array.from(new Uint8Array(raw)).map(b => b.toString(16).padStart(2, \"0\")).join(\"\");\n        } catch (e) {\n            return '';\n        }\n    }\n\n    /**\n     * @param {number} step\n     * @param {*} response\n     */\n    setApiResponseToInput(step, response) {\n        $(':button').prop('disabled', false);\n        if (response.hasOwnProperty('attempt_text')) {\n            this.setRemainingAttemptText(response.attempt_text);\n        }\n        if (response.hasOwnProperty('data')) {\n            const textArea = this.getStepTextArea(step);\n            if (textArea instanceof HTMLTextAreaElement) {\n                textArea.value = response.data;\n                textArea.dispatchEvent(new Event(\"change\"));\n            }\n        }\n        $('#loader').addClass('d-none');\n    }\n\n    updateAIButtonState() {\n        const buttons = document.querySelectorAll(this.selectors.doAIMagic + ', ' + this.selectors.expandSelection);\n\n        if (this.isDebugMode()) {\n            window.console.log(\n                `${this.component}: Updating button states, attempt ${this.attemptsCount} of ${this.maxAttempts}...`\n            );\n        }\n\n        const isDisabled = this.attemptsCount >= this.maxAttempts;\n\n        buttons.forEach((button) => {\n            button.disabled = isDisabled;\n            button.classList.toggle('d-none', isDisabled);\n        });\n\n        document.querySelector(this.selectors.maxAttemptsErrorMessage).classList.toggle('d-none', !isDisabled);\n    }\n\n    /**\n     * @param {number} step\n     * @return {Promise<void>}\n     */\n    async recordHistory(step) {\n        if (this.isDebugMode()) {\n            window.console.log(`${this.component}: Saving history...`);\n        }\n\n        if (step < 1) {\n            if (this.isDebugMode()) {\n                window.console.log(`${this.component}: Nothing to be save...`);\n            }\n            return;\n        }\n        const text = this.getStepInputText(step);\n        const checksum = await this.getHashCode(text);\n\n        if (checksum === this.getChecksumByStep(step)) {\n            if (this.isDebugMode()) {\n                window.console.log(`${this.component}: Nothing has been changed`);\n            }\n            return;\n        }\n\n        const response = await this.api.recordHistory(this.assignmentId, this.submissionId, text, step);\n        this.updateAIButtonState();\n        this.setChecksumByStep(step, response.checksum);\n\n        if (this.isDebugMode()) {\n            window.console.log(`${this.component}: Input text got recorded`);\n        }\n    }\n\n    async dispatchHistoryFromInput() {\n        const elements = document.querySelectorAll(this.selectors.input);\n        for (const element of elements) {\n            if (element instanceof HTMLTextAreaElement) {\n                await this.recordHistory(this.getStepNumber(element));\n            }\n        }\n    }\n}\n\n/**\n * @param {number} assignmentId\n * @param {number} submissionId\n * @param {number} stepNumber\n * @param {number} maxAttempts\n * @param {number} attemptsCount\n * @return {EventCreator}\n */\nexport const init = (\n    assignmentId,\n    submissionId,\n    stepNumber = 1,\n    maxAttempts = 2,\n    attemptsCount = 0\n) => {\n    return new EventCreator(assignmentId, submissionId, stepNumber, maxAttempts, attemptsCount);\n};\n"],"names":["Api","expandText","assignmentId","submissionId","text","selectedText","selectStart","step","this","assignment_id","submission","selected_text","select_start","generateText","recordHistory","methodName","parameters","Ajax","call","methodname","args","EventCreator","constructor","stepNumber","maxAttempts","attemptsCount","checksumList","pageChange","stepTextSave","wrapper","doAIMagic","expandSelection","input","maxAttemptsErrorMessage","currentStep","api","init","preventPasting","selectors","blurStepButton","button","HTMLElement","classList","remove","document","querySelector","addEventListener","eventList","e","isDebugMode","window","console","log","component","getCurrentStepByPageChangeEvent","currentStepButton","allStepButtons","querySelectorAll","add","copyTextFromPreviousStep","async","getPreviousStepByPageChangeEvent","getStepNumber","target","textData","getStepTextAreaData","validateInputText","loadingData","response","selectionStart","setApiResponseToInput","updateAIButtonState","dispatchHistoryFromInput","exception","Notification","warn","getStepInputText","defaultStep","forEach","getNumberFromAttribute","element","checksum","getHashCode","value","setChecksumByStep","getChecksumByStep","properties","attribute","getAttribute","number","Number","parseInt","isNaN","undefined","getStepInput","HTMLTextAreaElement","currentStepInput","trim","length","previousStep","previousStepInput","elements","event","ctrlKey","key","preventDefault","stopPropagation","M","_M","cfg","_M$cfg","developerdebug","setRemainingAttemptText","label","innerHTML","getStepTextArea","dataset","_element$dataset","textArea","substring","selectionEnd","_this$getStepTextArea2","modal","prop","removeClass","detail","_event$detail","prevStep","_event$detail2","buffer","TextEncoder","encode","raw","crypto","subtle","digest","Array","from","Uint8Array","map","b","toString","padStart","join","hasOwnProperty","attempt_text","data","dispatchEvent","Event","addClass","buttons","isDisabled","disabled","toggle"],"mappings":"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"}