{"version":3,"file":"pxaiendpoint.min.js","sources":["../src/pxaiendpoint.js"],"sourcesContent":["import $ from \"jquery\";\nimport Ajax from \"core/ajax\";\nimport Notification from \"core/notification\";\n\n/**\n * @typedef TextAreaData\n * @property {string} text\n * @property {string} selectedText\n * @property {number} selectionStart\n * @property {number} selectionEnd\n */\n\n/**\n * @param {number} assignmentId\n * @param {number} submissionId\n * @param {number} stepNumber\n */\nexport const init = (\n    assignmentId,\n    submissionId,\n    stepNumber = 1\n) => {\n\n    const defaultStep = 1;\n\n    let EventCreator = function (assignmentId, submissionId, stepNumber) {\n        this.currentStep = stepNumber;\n        this.selectedStart = 0;\n        this.selectedEnd = 0;\n        this.assignmentId = assignmentId;\n        this.submissionId = submissionId;\n        this.init();\n    };\n\n    const component = 'assignsubmission_pxaiwriter';\n\n    const eventList = {\n        pageChange: 'page-change',\n        stepTextSave: 'step-save'\n    };\n\n    const selectors = {\n        wrapper: '.assignsubmission_pxaiwriter',\n        doAIMagic: '#pxaiwriter-do-ai-magic',\n        expandSelection: '#pxaiwriter-expand-selection'\n    };\n\n    /**\n     * @return {boolean}\n     */\n    const isDebugMode = () => {\n        return !!M?.cfg?.developerdebug;\n    };\n\n    /**\n     * @param {string} text\n     */\n    const setRemainingAttemptText = (text) => {\n        if (!text) {\n            return;\n        }\n        const label = document.querySelector('.remaining-ai-attempts');\n        if (label instanceof HTMLElement) {\n            label.innerHTML = text;\n        }\n    };\n\n    /**\n     * @param {number} step\n     * @return {HTMLTextAreaElement|null}\n     */\n    const getStepTextArea = (step) => {\n        return document.querySelector(`textarea[name=\"pxaiwriter-data-step-${step}\"]`);\n    };\n\n    /**\n     * @param {HTMLElement} element\n     * @return {number}\n     */\n    const getCurrentStep = (element) => {\n        const currentStep = Number.parseInt(element?.dataset?.step);\n        if (Number.isNaN(currentStep)) {\n            return 0;\n        }\n        return currentStep;\n    };\n\n    /**\n     * @param {number} step\n     * @return {TextAreaData|null}\n     */\n    const getStepTextAreaData = (step) => {\n        const textArea = getStepTextArea(step);\n        if (!(textArea instanceof HTMLTextAreaElement)) {\n            return null;\n        }\n        return {\n            text: textArea.value,\n            selectedText: textArea.value.substring(textArea.selectionStart, textArea.selectionEnd),\n            selectionStart: textArea.selectionStart,\n            selectionEnd: textArea.selectionEnd\n        };\n    };\n\n    /**\n     * @param {number} step\n     * @return {string}\n     */\n    const getStepInputText = (step) => {\n        return getStepTextArea(step)?.value ?? '';\n    };\n\n    /**\n     * @param {string} text\n     * @return {boolean}\n     */\n    const validateInputText = (text) => {\n        if (!text || text.length === 0) {\n            $('#title-required-warning-modal').modal('show');\n            return false;\n        }\n        return true;\n    };\n\n    const loadingData = () => {\n        $(':button').prop('disabled', true);\n        $('#loader').removeClass('d-none');\n    };\n\n    /**\n     * @param {CustomEvent|Event} event\n     * @return {number}\n     */\n    const getCurrentStepByPageChangeEvent = (event) => {\n        return event?.detail?.currentStep;\n    };\n\n    /**\n     *\n     * @param {CustomEvent|Event} event\n     * @return {number}\n     */\n    const getPreviousStepByPageChangeEvent = (event) => {\n        const currentStep = getCurrentStepByPageChangeEvent(event);\n        const prevStep = event?.detail?.prevStep;\n        return currentStep === prevStep ? 0 : prevStep;\n    };\n\n    /**\n     * @param {string} text\n     * @return {Promise<string|null>}\n     */\n    const getHashCode = async (text) => {\n        if (!text) {\n            return null;\n        }\n        try {\n            const encoder = new TextEncoder();\n            const buffer = encoder.encode(text);\n            const raw = await crypto.subtle.digest(\"SHA-256\", buffer);\n            return Array.from(new Uint8Array(raw)).map(b => b.toString(16).padStart(2, \"0\")).join(\"\");\n        }\n        catch (e) {}\n        return null;\n    };\n\n    /**\n     * @template T\n     * @param {string} methodName\n     * @param {*} parameters\n     * @return {Promise<T>}\n     */\n    const requestAIApi = (methodName, parameters = {}) => {\n        return Ajax.call([\n            {\n                methodname: methodName,\n                args: parameters\n            },\n        ])[0];\n    };\n\n    const api = {\n        /**\n         * @template T\n         * @param {number} assignmentId\n         * @param {number} submissionId\n         * @param {string} text\n         * @param {string} selectedText\n         * @param {number} selectStart\n         * @return {Promise<T>}\n         */\n        expandText: (assignmentId, submissionId, text, selectedText, selectStart) => {\n            return requestAIApi(\n                'assignsubmission_pxaiwriter_expand_ai_text', {\n                assignment_id: assignmentId,\n                submission: submissionId,\n                text: text,\n                selected_text: selectedText,\n                select_start: selectStart,\n                step: defaultStep\n            });\n        },\n        /**\n         * @template T\n         * @param {number} assignmentId\n         * @param {number} submissionId\n         * @param {string} text\n         * @return {Promise<T>}\n         */\n        generateText: (assignmentId, submissionId, text) => {\n            return requestAIApi('assignsubmission_pxaiwriter_generate_ai_text', {\n                assignment_id: assignmentId,\n                submission: submissionId,\n                text: text,\n                step: defaultStep\n            });\n        },\n        /**\n         * @template T\n         * @param {number} assignmentId\n         * @param {number} submissionId\n         * @param {string} text\n         * @param {number} step\n         * @return {Promise<T>}\n         */\n        recordHistory: (assignmentId, submissionId, text, step = 1) => {\n            return requestAIApi('assignsubmission_pxaiwriter_record_history', {\n                assignment_id: assignmentId,\n                submission: submissionId,\n                text: text,\n                step: step\n            });\n        }\n    };\n\n    EventCreator.prototype.init = function () {\n        /**\n         * @param {HTMLElement} button\n         */\n        const highlightStepButton = (button) => {\n\n            if (!(button instanceof HTMLElement)) {\n                return;\n            }\n\n            button.classList.add('btn-outline-primary');\n            button.classList.remove('btn-outline-secondary');\n        };\n\n        /**\n         * @param {HTMLElement} button\n         */\n        const blurStepButton = (button) => {\n\n            if (!(button instanceof HTMLElement)) {\n                return;\n            }\n\n            button.classList.remove('btn-outline-primary');\n            button.classList.add('btn-outline-secondary');\n        };\n\n        const wrapper = document.querySelector(selectors.wrapper);\n\n        wrapper?.addEventListener(eventList.pageChange, (e) => {\n\n            if (isDebugMode()) {\n                window.console.log(`${component}: Step switched...`);\n            }\n\n            let step = getCurrentStepByPageChangeEvent(e);\n            const currentStepButton = document.querySelector(`.step-page-button[data-step-number=\"${step}\"]`);\n\n            if (!currentStepButton) {\n                return;\n            }\n\n            const allStepButtons = document.querySelectorAll(`.step-page-button[data-step-number]`);\n            for (const button of allStepButtons) {\n                blurStepButton(button);\n            }\n            highlightStepButton(currentStepButton);\n        });\n\n        wrapper?.addEventListener(eventList.pageChange, async (e) => {\n\n            if (isDebugMode()) {\n                window.console.log(`${component}: Saving history...`);\n            }\n\n            const step = getPreviousStepByPageChangeEvent(e);\n            if (step < 1) {\n                if (isDebugMode()) {\n                    window.console.log(`${component}: Nothing to be save...`);\n                }\n                return;\n            }\n            const text = getStepInputText(step);\n            const response = await api.recordHistory(this.assignmentId, this.submissionId, text, step);\n\n            if (isDebugMode() && response.hasOwnProperty(\"checksum\")) {\n                if (!response.checksum) {\n                    window.console.log(`${component}: Cannot determine changes in the data`);\n                    return;\n                }\n\n                const textChecksum = await getHashCode(text);\n                if (response.checksum === textChecksum) {\n                    window.console.log(`${component}: Input text got recorded`);\n                }\n                else {\n                    window.console.log(`${component}: Nothing has been changed`);\n                }\n            }\n        });\n\n        document.querySelector(selectors.expandSelection)?.addEventListener(\"click\", async (e) => {\n\n            if (isDebugMode()) {\n                window.console.log(`${component}: Expand selected text...`);\n            }\n            const step = getCurrentStep(e.target);\n            const textData = getStepTextAreaData(step);\n\n            const text = textData.text;\n            const selectedText = textData?.selectedText;\n\n            if (!validateInputText(selectedText)) {\n                if (isDebugMode()) {\n                    window.console.warn(`${component}: No selection detected`);\n                }\n                return;\n            }\n\n            loadingData();\n\n            try {\n                const response = await api.expandText(\n                    this.assignmentId,\n                    this.submissionId,\n                    text,\n                    selectedText,\n                    textData.selectionStart\n                );\n                setApiResponseToInput(this.currentStep, response);\n            }\n            catch (exception) {\n                await Notification.exception(exception);\n            }\n        });\n\n        document.querySelector(selectors.doAIMagic)?.addEventListener(\"click\", async (e) => {\n\n            if (isDebugMode()) {\n                window.console.log(`${component}: Do AI magic...`);\n            }\n\n            const text = getStepInputText(getCurrentStep(e.target));\n\n            if (!validateInputText(text)) {\n                if (isDebugMode()) {\n                    window.console.warn(`${component}: Input text is empty`);\n                }\n                return;\n            }\n\n            loadingData();\n\n            try {\n                const response = await api.generateText(\n                    this.assignmentId,\n                    this.submissionId,\n                    text,\n                    this.currentStep\n                );\n                setApiResponseToInput(this.currentStep, response);\n            }\n            catch (exception) {\n                await Notification.exception(exception);\n            }\n        });\n    };\n\n    const setApiResponseToInput = (step, response) => {\n        $(':button').prop('disabled', false);\n        if (response.hasOwnProperty('attempt_text')) {\n            setRemainingAttemptText(response.attempt_text);\n        }\n        if (response.hasOwnProperty('data')) {\n            const textArea = getStepTextArea(step);\n            if (textArea instanceof HTMLTextAreaElement) {\n                textArea.value = response.data;\n                textArea.dispatchEvent(new Event(\"change\"));\n            }\n        }\n        $('#loader').addClass('d-none');\n    };\n\n    return new EventCreator(assignmentId,  submissionId, stepNumber);\n};\n"],"names":["assignmentId","submissionId","stepNumber","defaultStep","EventCreator","currentStep","selectedStart","selectedEnd","init","component","eventList","pageChange","stepTextSave","selectors","wrapper","doAIMagic","expandSelection","isDebugMode","M","_M","cfg","_M$cfg","developerdebug","setRemainingAttemptText","text","label","document","querySelector","HTMLElement","innerHTML","getStepTextArea","step","getCurrentStep","element","Number","parseInt","dataset","_element$dataset","isNaN","getStepTextAreaData","textArea","HTMLTextAreaElement","value","selectedText","substring","selectionStart","selectionEnd","getStepInputText","_getStepTextArea","validateInputText","length","modal","loadingData","prop","removeClass","getCurrentStepByPageChangeEvent","event","detail","_event$detail","getPreviousStepByPageChangeEvent","prevStep","_event$detail2","getHashCode","async","buffer","TextEncoder","encode","raw","crypto","subtle","digest","Array","from","Uint8Array","map","b","toString","padStart","join","e","requestAIApi","methodName","parameters","Ajax","call","methodname","args","api","expandText","selectStart","assignment_id","submission","selected_text","select_start","generateText","recordHistory","prototype","blurStepButton","button","classList","remove","add","addEventListener","window","console","log","currentStepButton","allStepButtons","querySelectorAll","response","this","hasOwnProperty","checksum","textChecksum","target","textData","setApiResponseToInput","exception","Notification","warn","attempt_text","data","dispatchEvent","Event","addClass"],"mappings":"ocAiBoB,SAChBA,aACAC,kBACAC,kEAAa,QAGPC,YAAc,MAEhBC,aAAe,SAAUJ,aAAcC,aAAcC,iBAChDG,YAAcH,gBACdI,cAAgB,OAChBC,YAAc,OACdP,aAAeA,kBACfC,aAAeA,kBACfO,cAGHC,UAAY,8BAEZC,UAAY,CACdC,WAAY,cACZC,aAAc,aAGZC,UAAY,CACdC,QAAS,+BACTC,UAAW,0BACXC,gBAAiB,gCAMfC,YAAc,sCACPC,gCAAAC,GAAGC,wBAAHC,OAAQC,iBAMfC,wBAA2BC,WACxBA,kBAGCC,MAAQC,SAASC,cAAc,0BACjCF,iBAAiBG,cACjBH,MAAMI,UAAYL,OAQpBM,gBAAmBC,MACdL,SAASC,4DAAqDI,YAOnEC,eAAkBC,qCACd5B,YAAc6B,OAAOC,SAASF,MAAAA,kCAAAA,QAASG,2CAATC,iBAAkBN,aAClDG,OAAOI,MAAMjC,aACN,EAEJA,aAOLkC,oBAAuBR,aACnBS,SAAWV,gBAAgBC,aAC3BS,oBAAoBC,oBAGnB,CACHjB,KAAMgB,SAASE,MACfC,aAAcH,SAASE,MAAME,UAAUJ,SAASK,eAAgBL,SAASM,cACzED,eAAgBL,SAASK,eACzBC,aAAcN,SAASM,cANhB,MAcTC,iBAAoBhB,gHACfD,gBAAgBC,yCAAhBiB,iBAAuBN,6DAAS,IAOrCO,kBAAqBzB,SAClBA,MAAwB,IAAhBA,KAAK0B,8BACZ,iCAAiCC,MAAM,SAClC,GAKTC,YAAc,yBACd,WAAWC,KAAK,YAAY,uBAC5B,WAAWC,YAAY,WAOvBC,gCAAmCC,iCAC9BA,MAAAA,6BAAAA,MAAOC,uCAAPC,cAAerD,aAQpBsD,iCAAoCH,iCAChCnD,YAAckD,gCAAgCC,OAC9CI,SAAWJ,MAAAA,8BAAAA,MAAOC,wCAAPI,eAAeD,gBACzBvD,cAAgBuD,SAAW,EAAIA,UAOpCE,YAAcC,MAAAA,WACXvC,YACM,eAIDwC,QADU,IAAIC,aACGC,OAAO1C,MACxB2C,UAAYC,OAAOC,OAAOC,OAAO,UAAWN,eAC3CO,MAAMC,KAAK,IAAIC,WAAWN,MAAMO,KAAIC,GAAKA,EAAEC,SAAS,IAAIC,SAAS,EAAG,OAAMC,KAAK,IAE1F,MAAOC,WACA,MASLC,aAAe,SAACC,gBAAYC,kEAAa,UACpCC,cAAKC,KAAK,CACb,CACIC,WAAYJ,WACZK,KAAMJ,cAEX,IAGDK,IAAM,CAURC,WAAY,CAACxF,aAAcC,aAAcuB,KAAMmB,aAAc8C,cAClDT,aACH,6CAA8C,CAC9CU,cAAe1F,aACf2F,WAAY1F,aACZuB,KAAMA,KACNoE,cAAejD,aACfkD,aAAcJ,YACd1D,KAAM5B,cAUd2F,aAAc,CAAC9F,aAAcC,aAAcuB,OAChCwD,aAAa,+CAAgD,CAChEU,cAAe1F,aACf2F,WAAY1F,aACZuB,KAAMA,KACNO,KAAM5B,cAWd4F,cAAe,SAAC/F,aAAcC,aAAcuB,UAAMO,4DAAO,SAC9CiD,aAAa,6CAA8C,CAC9DU,cAAe1F,aACf2F,WAAY1F,aACZuB,KAAMA,KACNO,KAAMA,SAKlB3B,aAAa4F,UAAUxF,KAAO,kEAiBpByF,eAAkBC,SAEdA,kBAAkBtE,cAIxBsE,OAAOC,UAAUC,OAAO,uBACxBF,OAAOC,UAAUE,IAAI,2BAGnBvF,QAAUY,SAASC,cAAcd,UAAUC,SAEjDA,MAAAA,SAAAA,QAASwF,iBAAiB5F,UAAUC,YAAaoE,IAEzC9D,eACAsF,OAAOC,QAAQC,cAAOhG,qCAGtBsB,KAAOwB,gCAAgCwB,SACrC2B,kBAAoBhF,SAASC,4DAAqDI,gBAEnF2E,+BAICC,eAAiBjF,SAASkF,4DAC3B,MAAMV,UAAUS,eACjBV,eAAeC,QAxCMA,IAAAA,QAAAA,OA0CLQ,6BAxCI9E,cAIxBsE,OAAOC,UAAUE,IAAI,uBACrBH,OAAOC,UAAUC,OAAO,6BAsC5BtF,MAAAA,SAAAA,QAASwF,iBAAiB5F,UAAUC,YAAYoD,MAAAA,IAExC9C,eACAsF,OAAOC,QAAQC,cAAOhG,wCAGpBsB,KAAO4B,iCAAiCoB,MAC1ChD,KAAO,cACHd,eACAsF,OAAOC,QAAQC,cAAOhG,6CAIxBe,KAAOuB,iBAAiBhB,MACxB8E,eAAiBtB,IAAIQ,cAAce,KAAK9G,aAAc8G,KAAK7G,aAAcuB,KAAMO,SAEjFd,eAAiB4F,SAASE,eAAe,YAAa,KACjDF,SAASG,qBACVT,OAAOC,QAAQC,cAAOhG,2DAIpBwG,mBAAqBnD,YAAYtC,MACnCqF,SAASG,WAAaC,aACtBV,OAAOC,QAAQC,cAAOhG,wCAGtB8F,OAAOC,QAAQC,cAAOhG,2EAKlCiB,SAASC,cAAcd,UAAUG,yEAAkBsF,iBAAiB,SAASvC,MAAAA,IAErE9C,eACAsF,OAAOC,QAAQC,cAAOhG,8CAEpBsB,KAAOC,eAAe+C,EAAEmC,QACxBC,SAAW5E,oBAAoBR,MAE/BP,KAAO2F,SAAS3F,KAChBmB,aAAewE,MAAAA,gBAAAA,SAAUxE,gBAE1BM,kBAAkBN,eAOvBS,wBAGUyD,eAAiBtB,IAAIC,WACvBsB,KAAK9G,aACL8G,KAAK7G,aACLuB,KACAmB,aACAwE,SAAStE,gBAEbuE,sBAAsBN,KAAKzG,YAAawG,UAE5C,MAAOQ,iBACGC,sBAAaD,UAAUA,iBAnBzBpG,eACAsF,OAAOC,QAAQe,eAAQ9G,wEAsBnCiB,SAASC,cAAcd,UAAUE,qEAAYuF,iBAAiB,SAASvC,MAAAA,IAE/D9C,eACAsF,OAAOC,QAAQC,cAAOhG,qCAGpBe,KAAOuB,iBAAiBf,eAAe+C,EAAEmC,YAE1CjE,kBAAkBzB,OAOvB4B,wBAGUyD,eAAiBtB,IAAIO,aACvBgB,KAAK9G,aACL8G,KAAK7G,aACLuB,KACAsF,KAAKzG,aAET+G,sBAAsBN,KAAKzG,YAAawG,UAE5C,MAAOQ,iBACGC,sBAAaD,UAAUA,iBAlBzBpG,eACAsF,OAAOC,QAAQe,eAAQ9G,8CAsBjC2G,sBAAwB,CAACrF,KAAM8E,mCAC/B,WAAWxD,KAAK,YAAY,GAC1BwD,SAASE,eAAe,iBACxBxF,wBAAwBsF,SAASW,cAEjCX,SAASE,eAAe,QAAS,OAC3BvE,SAAWV,gBAAgBC,MAC7BS,oBAAoBC,sBACpBD,SAASE,MAAQmE,SAASY,KAC1BjF,SAASkF,cAAc,IAAIC,MAAM,gCAGvC,WAAWC,SAAS,kBAGnB,IAAIxH,aAAaJ,aAAeC,aAAcC"}