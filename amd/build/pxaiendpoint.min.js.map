{"version":3,"file":"pxaiendpoint.min.js","sources":["../src/pxaiendpoint.js"],"sourcesContent":["import $ from \"jquery\";\nimport Ajax from \"core/ajax\";\nimport Notification from \"core/notification\";\n\n/**\n * @param {number} assignmentId\n */\nexport const init = (\n    assignmentId\n) => {\n\n    let EventCreator = function (assignmentId) {\n        this.currentStep = 0;\n        this.selectedStart = 0;\n        this.selectedEnd = 0;\n        this.assignmentId = assignmentId;\n        this.init();\n    };\n\n    const eventList = {\n        pageChange: 'page-change'\n    };\n\n    /**\n     * @param {string} text\n     */\n    const setRemainingAttemptText = (text) => {\n        if (!text) {\n            return;\n        }\n        const label = document.querySelector('.remaining-ai-attempts');\n        if (label instanceof HTMLElement) {\n            label.innerHTML = text;\n        }\n    };\n\n    /**\n     * @param {number} step\n     * @return {HTMLTextAreaElement|null}\n     */\n    const getStepTextArea = (step) => {\n        return document.querySelector(`textarea[name=\"pxaiwriter-data-step-${step}\"]`);\n    };\n\n    /**\n     * @param {HTMLElement} element\n     * @return {number}\n     */\n    const getCurrentStep = (element) => {\n        const currentStep = Number.parseInt(element?.dataset?.step);\n        if (Number.isNaN(currentStep)) {\n            return 0;\n        }\n        return currentStep;\n    };\n\n    /**\n     * @param {number} step\n     * @return {string}\n     */\n    const getStepInputText = (step) => {\n        return getStepTextArea(step)?.value ?? '';\n    };\n\n    /**\n     * @param {string} text\n     * @return {boolean}\n     */\n    const validateInputText = (text) => {\n        if (!text || text.length === 0) {\n            $('#title-required-warning-modal').modal('show');\n            return false;\n        }\n        return true;\n    };\n\n    const loadingData = () => {\n        $(':button').prop('disabled', true);\n        $('#loader').removeClass('d-none');\n    };\n\n    /**\n     * @param {CustomEvent|Event} event\n     * @return {number}\n     */\n    const getCurrentStepFromPageChangeEvent = (event) => {\n        return event?.detail?.currentStep;\n    };\n\n    /**\n     * @template T\n     * @param {string} methodName\n     * @param {number} assignmentId\n     * @param {string} text\n     * @param {number} step\n     * @return {Promise<T>}\n     */\n    const requestAIApi = (\n        methodName,\n        assignmentId,\n        text,\n        step = 1\n    ) => {\n        return Ajax.call([\n            {\n                methodname: methodName,\n                args: {\n                    assignment_id: assignmentId,\n                    step: step,\n                    text: text\n                }\n            },\n        ])[0];\n    };\n\n    EventCreator.prototype.init = function () {\n        const actionsContainer = $(\".actions-container\");\n        /**\n         * @param {HTMLElement} button\n         */\n        const highlightStepButton = (button) => {\n            if (!(button instanceof HTMLElement)) {\n                return;\n            }\n            button.classList.add('btn-outline-primary');\n            button.classList.remove('btn-outline-secondary');\n        };\n\n        /**\n         * @param {HTMLElement} button\n         */\n        const blurStepButton = (button) => {\n            if (!(button instanceof HTMLElement)) {\n                return;\n            }\n            button.classList.remove('btn-outline-primary');\n            button.classList.add('btn-outline-secondary');\n        };\n\n        const getSelectedTextAreaText = (step) => {\n            const textArea = getStepTextArea(step);\n            if (textArea instanceof HTMLTextAreaElement) {\n                this.selectedStart = textArea.selectionStart;\n                this.selectedEnd = textArea.selectionEnd;\n                return textArea.value.substring(this.selectedStart, this.selectedEnd);\n            }\n            else {\n                window.console.warn(\"Error: No text was selected\");\n            }\n            return '';\n        };\n\n        document.querySelector('.assignsubmission_pxaiwriter').addEventListener(eventList.pageChange, (e) => {\n            let step = getCurrentStepFromPageChangeEvent(e);\n            const currentStepButton = document.querySelector(`.step-page-button[data-step-number=\"${step}\"]`);\n            if (!currentStepButton) {\n                return;\n            }\n\n            const allStepButtons = document.querySelectorAll(`.step-page-button[data-step-number]`);\n            for (const button of allStepButtons) {\n                blurStepButton(button);\n            }\n            highlightStepButton(currentStepButton);\n        });\n\n        actionsContainer.on(\"click\", '#pxaiwriter-expand-selection', async (e) => {\n\n            const selectedText = getSelectedTextAreaText(getCurrentStep(e.target));\n            if (!selectedText) {\n                $('#text-selection-required-warning-modal').modal('show');\n                return;\n            }\n\n            loadingData();\n\n            try {\n                const response = await requestAIApi(\n                    'assignsubmission_pxaiwriter_expand_ai_text',\n                    this.assignmentId,\n                    selectedText,\n                    this.currentStep\n                );\n                setApiResponseToInput(this.currentStep, response);\n            }\n            catch (exception) {\n                await Notification.exception(exception);\n            }\n        });\n\n        actionsContainer.on(\"click\", '#pxaiwriter-do-ai-magic', async (e) => {\n\n            const titleText = getStepInputText(getCurrentStep(e.target));\n            if (!validateInputText(titleText)) {\n                return;\n            }\n\n            loadingData();\n\n            try {\n                const response = await requestAIApi(\n                    'assignsubmission_pxaiwriter_generate_ai_text',\n                    this.assignmentId,\n                    titleText,\n                    this.currentStep\n                );\n                setApiResponseToInput(this.currentStep, response);\n            }\n            catch (exception) {\n                await Notification.exception(exception);\n            }\n        });\n    };\n\n    const setApiResponseToInput = (step, response) => {\n        $(':button').prop('disabled', false);\n        if (response.hasOwnProperty('attempt_text')) {\n            setRemainingAttemptText(response.attempt_text);\n        }\n        if (response.hasOwnProperty('data')) {\n            const textArea = getStepTextArea(step);\n            if (textArea instanceof HTMLTextAreaElement) {\n                textArea.value = response.data;\n                textArea.dispatchEvent(new Event(\"change\"));\n            }\n        }\n        $('#loader').addClass('d-none');\n    };\n\n    return new EventCreator(assignmentId);\n};\n"],"names":["assignmentId","EventCreator","currentStep","selectedStart","selectedEnd","init","eventList","getStepTextArea","step","document","querySelector","getCurrentStep","element","Number","parseInt","dataset","_element$dataset","isNaN","loadingData","prop","removeClass","requestAIApi","methodName","text","Ajax","call","methodname","args","assignment_id","prototype","actionsContainer","blurStepButton","button","HTMLElement","classList","remove","add","getSelectedTextAreaText","textArea","HTMLTextAreaElement","selectionStart","selectionEnd","value","substring","this","window","console","warn","addEventListener","e","event","detail","_event$detail","currentStepButton","allStepButtons","querySelectorAll","on","async","selectedText","target","response","setApiResponseToInput","exception","Notification","modal","titleText","_getStepTextArea","length","hasOwnProperty","label","innerHTML","setRemainingAttemptText","attempt_text","data","dispatchEvent","Event","addClass"],"mappings":"ocAQIA,mBAGIC,aAAe,SAAUD,mBACpBE,YAAc,OACdC,cAAgB,OAChBC,YAAc,OACdJ,aAAeA,kBACfK,cAGHC,qBACU,cAoBVC,gBAAmBC,MACdC,SAASC,4DAAqDF,YAOnEG,eAAkBC,qCACdV,YAAcW,OAAOC,SAASF,MAAAA,kCAAAA,QAASG,2CAATC,iBAAkBR,aAClDK,OAAOI,MAAMf,aACN,EAEJA,aAuBLgB,YAAc,yBACd,WAAWC,KAAK,YAAY,uBAC5B,WAAWC,YAAY,WAmBvBC,aAAe,SACjBC,WACAtB,aACAuB,UACAf,4DAAO,SAEAgB,cAAKC,KAAK,CACb,CACIC,WAAYJ,WACZK,KAAM,CACFC,cAAe5B,aACfQ,KAAMA,KACNe,KAAMA,SAGf,IAGPtB,aAAa4B,UAAUxB,KAAO,iBACpByB,kBAAmB,mBAAE,sBAerBC,eAAkBC,SACdA,kBAAkBC,cAGxBD,OAAOE,UAAUC,OAAO,uBACxBH,OAAOE,UAAUE,IAAI,2BAGnBC,wBAA2B7B,aACvB8B,SAAW/B,gBAAgBC,aAC7B8B,oBAAoBC,0BACfpC,cAAgBmC,SAASE,oBACzBpC,YAAckC,SAASG,aACrBH,SAASI,MAAMC,UAAUC,KAAKzC,cAAeyC,KAAKxC,eAGzDyC,OAAOC,QAAQC,KAAK,+BAEjB,KAGXtC,SAASC,cAAc,gCAAgCsC,iBAAiB1C,sBAAuB2C,QACvFzC,KAnED0C,OADgCA,MAoEUD,0BAnE1CC,MAAOC,uCAAPC,cAAelD,YADiBgD,IAAAA,0BAqE7BG,kBAAoB5C,SAASC,4DAAqDF,gBACnF6C,+BAICC,eAAiB7C,SAAS8C,4DAC3B,MAAMvB,UAAUsB,eACjBvB,eAAeC,QAzCMA,IAAAA,QAAAA,OA2CLqB,6BA1CIpB,cAGxBD,OAAOE,UAAUE,IAAI,uBACrBJ,OAAOE,UAAUC,OAAO,6BAyC5BL,iBAAiB0B,GAAG,QAAS,gCAAgCC,MAAAA,UAEnDC,aAAerB,wBAAwB1B,eAAesC,EAAEU,YACzDD,cAKLxC,wBAGU0C,eAAiBvC,aACnB,6CACAuB,KAAK5C,aACL0D,aACAd,KAAK1C,aAET2D,sBAAsBjB,KAAK1C,YAAa0D,UAE5C,MAAOE,iBACGC,sBAAaD,UAAUA,oCAhB3B,0CAA0CE,MAAM,WAoB1DlC,iBAAiB0B,GAAG,QAAS,2BAA2BC,MAAAA,UAE9CQ,WApIYzD,KAoIiBG,eAAesC,EAAEU,+DAnIjDpD,gBAAgBC,yCAAhB0D,iBAAuBxB,6DAAS,IADjBlC,IAAAA,gDAQCe,KA6HI0C,YA5HE,IAAhB1C,KAAK4C,6BACZ,iCAAiCH,MAAM,QAClC,IAHYzC,IAAAA,KAiInBL,wBAGU0C,eAAiBvC,aACnB,+CACAuB,KAAK5C,aACLiE,UACArB,KAAK1C,aAET2D,sBAAsBjB,KAAK1C,YAAa0D,UAE5C,MAAOE,iBACGC,sBAAaD,UAAUA,uBAKnCD,sBAAwB,CAACrD,KAAMoD,mCAC/B,WAAWzC,KAAK,YAAY,GAC1ByC,SAASQ,eAAe,iBA9LC7C,CAAAA,WACxBA,kBAGC8C,MAAQ5D,SAASC,cAAc,0BACjC2D,iBAAiBpC,cACjBoC,MAAMC,UAAY/C,OAyLlBgD,CAAwBX,SAASY,cAEjCZ,SAASQ,eAAe,QAAS,OAC3B9B,SAAW/B,gBAAgBC,MAC7B8B,oBAAoBC,sBACpBD,SAASI,MAAQkB,SAASa,KAC1BnC,SAASoC,cAAc,IAAIC,MAAM,gCAGvC,WAAWC,SAAS,kBAGnB,IAAI3E,aAAaD"}