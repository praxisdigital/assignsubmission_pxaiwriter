{"version":3,"file":"pxaiendpoint.min.js","sources":["../src/pxaiendpoint.js"],"sourcesContent":["/* eslint-disable camelcase */\nimport $ from \"jquery\";\nimport Ajax from \"core/ajax\";\nimport Notification from \"core/notification\";\n\n/**\n * @typedef {Object} HistoryRecordResponse\n * @property {string} checksum\n * @property {string} timecreated\n * @property {string} timemodified\n */\n\n/**\n * @typedef TextAreaData\n * @property {string} text\n * @property {string} selectedText\n * @property {number} selectionStart\n * @property {number} selectionEnd\n */\n\n/**\n * @param {number} assignmentId\n * @param {number} submissionId\n * @param {number} stepNumber\n * @return {EventCreator}\n */\nexport const init = (\n    assignmentId,\n    submissionId,\n    stepNumber = 1\n) => {\n\n    const defaultStep = 1;\n\n    let properties = {\n        checksumList: {},\n    };\n\n    /**\n     * @param {number} step\n     * @return {string}\n     */\n    const getChecksumByStep = (step) => {\n        return properties.checksumList[step] ?? '';\n    };\n\n    /**\n     * @param {number} step\n     * @param {string} checksum\n     */\n    const setChecksumByStep = (step, checksum) => {\n        properties.checksumList[step] = checksum;\n    };\n\n    const getNumberFromAttribute = (element, attribute) => {\n        const value = element?.getAttribute(attribute);\n        if (!value) {\n            return undefined;\n        }\n        const number = Number.parseInt(value);\n        return Number.isNaN(number) ? undefined : number;\n    };\n\n    /**\n     * @param {number} assignmentId\n     * @param {number} submissionId\n     * @param {number} stepNumber\n     * @constructor\n     */\n    let EventCreator = function(assignmentId, submissionId, stepNumber) {\n        this.currentStep = stepNumber;\n        this.selectedStart = 0;\n        this.selectedEnd = 0;\n        this.assignmentId = assignmentId;\n        this.submissionId = submissionId;\n        this.init();\n    };\n\n    const component = 'assignsubmission_pxaiwriter';\n\n    const eventList = {\n        pageChange: 'page-change',\n        stepTextSave: 'step-save'\n    };\n\n    const selectors = {\n        wrapper: '.assignsubmission_pxaiwriter',\n        doAIMagic: '#pxaiwriter-do-ai-magic',\n        expandSelection: '#pxaiwriter-expand-selection',\n        input: '.pxaiwriter-student-data[data-input-step]',\n    };\n\n    /**\n     * @param {number} step\n     * @return {HTMLTextAreaElement|null}\n     */\n    const getStepInput = (step) => {\n        const element = document.querySelector(`${selectors.input}[data-input-step=\"${step}\"]`);\n        if (element instanceof HTMLTextAreaElement) {\n            return element;\n        }\n        return null;\n    };\n\n    /**\n     * @param {number} step\n     */\n    const copyTextFromPreviousStep = (step) => {\n\n        if (isDebugMode()) {\n            window.console.log(`${component}: Try to copy the text from the previous step to step ${step}...`);\n        }\n\n        const currentStepInput = getStepInput(step);\n        if (currentStepInput === null) {\n            if (isDebugMode()) {\n                window.console.log(`${component}: Cannot find the current step ${step}`);\n            }\n            return;\n        }\n\n        if (currentStepInput.value.trim().length !== 0) {\n            if (isDebugMode()) {\n                window.console.log(`${component}: Cannot copy because the current step (${step}) is not empty`);\n            }\n            return;\n        }\n\n        const previousStep = step - 1;\n        const previousStepInput = getStepInput(previousStep);\n\n        if (previousStepInput === null) {\n            if (isDebugMode()) {\n                window.console.log(`${component}: Cannot find the previous step ${previousStep}`);\n            }\n            return;\n        }\n\n        if (previousStepInput.value.trim().length === 0) {\n            if (isDebugMode()) {\n                window.console.log(`${component}: Cannot copy because the previous step (${step}) is empty`);\n            }\n            return;\n        }\n\n        currentStepInput.value = previousStepInput.value;\n\n        if (isDebugMode()) {\n            window.console.log(`${component}: Copied the text from step ${previousStep} to ${step}`);\n        }\n    };\n\n    /**\n     * @param {string} target\n     */\n    const preventPasting = (target) => {\n        const elements = document.querySelectorAll(target);\n        if (!elements) {\n            return;\n        }\n        for (const element of elements) {\n            element.addEventListener('keydown', (event) => {\n                if (event.ctrlKey && event.key === 'v') {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    return false;\n                }\n                return true;\n            });\n            element.addEventListener('paste', (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n                return false;\n            });\n        }\n    };\n\n    /**\n     * @return {boolean}\n     */\n    const isDebugMode = () => {\n        return !!M?.cfg?.developerdebug;\n    };\n\n    /**\n     * @param {string} text\n     */\n    const setRemainingAttemptText = (text) => {\n        if (!text) {\n            return;\n        }\n        const label = document.querySelector('.remaining-ai-attempts');\n        if (label instanceof HTMLElement) {\n            label.innerHTML = text;\n        }\n    };\n\n    /**\n     * @param {number} step\n     * @return {HTMLTextAreaElement|null}\n     */\n    const getStepTextArea = (step) => {\n        return document.querySelector(`textarea[name=\"pxaiwriter-data-step-${step}\"]`);\n    };\n\n    /**\n     * @param {HTMLElement} element\n     * @return {number}\n     */\n    const getStepNumber = (element) => {\n        const currentStep = Number.parseInt(element?.dataset?.step);\n        if (Number.isNaN(currentStep)) {\n            return 0;\n        }\n        return currentStep;\n    };\n\n    /**\n     * @param {number} step\n     * @return {TextAreaData|null}\n     */\n    const getStepTextAreaData = (step) => {\n        const textArea = getStepTextArea(step);\n        if (!(textArea instanceof HTMLTextAreaElement)) {\n            return null;\n        }\n        return {\n            text: textArea.value,\n            selectedText: textArea.value.substring(textArea.selectionStart, textArea.selectionEnd),\n            selectionStart: textArea.selectionStart,\n            selectionEnd: textArea.selectionEnd\n        };\n    };\n\n    /**\n     * @param {number} step\n     * @return {string}\n     */\n    const getStepInputText = (step) => {\n        return getStepTextArea(step)?.value ?? '';\n    };\n\n    /**\n     * @param {string} text\n     * @return {boolean}\n     */\n    const validateInputText = (text) => {\n        if (!text || text.length === 0) {\n            $('#title-required-warning-modal').modal('show');\n            return false;\n        }\n        return true;\n    };\n\n    const loadingData = () => {\n        $(':button').prop('disabled', true);\n        $('#loader').removeClass('d-none');\n    };\n\n    /**\n     * @param {CustomEvent|Event} event\n     * @return {number}\n     */\n    const getCurrentStepByPageChangeEvent = (event) => {\n        return event?.detail?.currentStep;\n    };\n\n    /**\n     *\n     * @param {CustomEvent|Event} event\n     * @return {number}\n     */\n    const getPreviousStepByPageChangeEvent = (event) => {\n        const currentStep = getCurrentStepByPageChangeEvent(event);\n        const prevStep = event?.detail?.prevStep;\n        return currentStep === prevStep ? 0 : prevStep;\n    };\n\n    /**\n     * @param {string} text\n     * @return {Promise<string>}\n     */\n    const getHashCode = async(text) => {\n        if (!text) {\n            return null;\n        }\n        try {\n            const encoder = new TextEncoder();\n            const buffer = encoder.encode(text);\n            const raw = await crypto.subtle.digest(\"SHA-256\", buffer);\n            return Array.from(new Uint8Array(raw)).map(b => b.toString(16).padStart(2, \"0\")).join(\"\");\n        } catch (e) {\n            return '';\n        }\n    };\n\n    /**\n     * @template T\n     * @param {string} methodName\n     * @param {*} parameters\n     * @return {Promise<T>}\n     */\n    const requestAIApi = (methodName, parameters = {}) => {\n        return Ajax.call([\n            {\n                methodname: methodName,\n                args: parameters\n            },\n        ])[0];\n    };\n\n    const api = {\n        /**\n         * @template T\n         * @param {number} assignmentId\n         * @param {number} submissionId\n         * @param {string} text\n         * @param {string} selectedText\n         * @param {number} selectStart\n         * @param {number} step\n         * @return {Promise<T>}\n         */\n        expandText: (assignmentId, submissionId, text, selectedText, selectStart, step = 1) => {\n            return requestAIApi(\n                'assignsubmission_pxaiwriter_expand_ai_text', {\n                assignment_id: assignmentId,\n                submission: submissionId,\n                text: text,\n                selected_text: selectedText,\n                select_start: selectStart,\n                step: step\n            });\n        },\n        /**\n         * @template T\n         * @param {number} assignmentId\n         * @param {number} submissionId\n         * @param {string} text\n         * @param {number} step\n         * @return {Promise<T>}\n         */\n        generateText: (assignmentId, submissionId, text, step = 1) => {\n            return requestAIApi('assignsubmission_pxaiwriter_generate_ai_text', {\n                assignment_id: assignmentId,\n                submission: submissionId,\n                text: text,\n                step: step\n            });\n        },\n        /**\n         * @param {number} assignmentId\n         * @param {number} submissionId\n         * @param {string} text\n         * @param {number} step\n         * @return {Promise<HistoryRecordResponse>}\n         */\n        recordHistory: (assignmentId, submissionId, text, step = 1) => {\n            return requestAIApi('assignsubmission_pxaiwriter_record_history', {\n                assignment_id: assignmentId,\n                submission: submissionId,\n                text: text,\n                step: step\n            });\n        }\n    };\n\n    EventCreator.prototype.init = function() {\n\n        preventPasting(selectors.input);\n\n        /**\n         * @param {HTMLElement} button\n         */\n        const highlightStepButton = (button) => {\n            if (!(button instanceof HTMLElement)) {\n                return;\n            }\n            button.classList.add('current');\n        };\n\n        /**\n         * @param {HTMLElement} button\n         */\n        const blurStepButton = (button) => {\n            if (!(button instanceof HTMLElement)) {\n                return;\n            }\n            button.classList.remove('current');\n        };\n\n        const wrapper = document.querySelector(selectors.wrapper);\n\n        wrapper?.addEventListener(eventList.pageChange, (e) => {\n\n            if (isDebugMode()) {\n                window.console.log(`${component}: Step switched...`);\n            }\n\n            let step = getCurrentStepByPageChangeEvent(e);\n            const currentStepButton = document.querySelector(`.step-page-button[data-step-number=\"${step}\"]`);\n\n            if (!currentStepButton) {\n                return;\n            }\n\n            const allStepButtons = document.querySelectorAll(`.step-page-button[data-step-number]`);\n            for (const button of allStepButtons) {\n                blurStepButton(button);\n            }\n            highlightStepButton(currentStepButton);\n\n            copyTextFromPreviousStep(step);\n        });\n\n        wrapper?.addEventListener(eventList.pageChange, async(e) => {\n            if (isDebugMode()) {\n                window.console.log(`${component}: Page changed`);\n            }\n\n            const step = getPreviousStepByPageChangeEvent(e);\n            await recordHistory(step);\n        });\n\n        document.querySelector(selectors.expandSelection)?.addEventListener(\"click\", async(e) => {\n\n            if (isDebugMode()) {\n                window.console.log(`${component}: Expand selected text...`);\n            }\n            const step = getStepNumber(e.target);\n            const textData = getStepTextAreaData(step);\n\n            const text = textData.text;\n            const selectedText = textData?.selectedText;\n\n            if (!validateInputText(selectedText)) {\n                if (isDebugMode()) {\n                    window.console.warn(`${component}: No selection detected`);\n                }\n                return;\n            }\n\n            loadingData();\n\n            try {\n                const response = await api.expandText(\n                    assignmentId,\n                    submissionId,\n                    text,\n                    selectedText,\n                    textData.selectionStart\n                );\n                setApiResponseToInput(this.currentStep, response);\n                await dispatchHistoryFromInput();\n            } catch (exception) {\n                await Notification.exception(exception);\n            }\n        });\n\n        document.querySelector(selectors.doAIMagic)?.addEventListener(\"click\", async(e) => {\n\n            if (isDebugMode()) {\n                window.console.log(`${component}: Do AI magic...`);\n            }\n\n            const text = getStepInputText(getStepNumber(e.target));\n\n            if (!validateInputText(text)) {\n                if (isDebugMode()) {\n                    window.console.warn(`${component}: Input text is empty`);\n                }\n                return;\n            }\n\n            loadingData();\n\n            try {\n                const response = await api.generateText(\n                    assignmentId,\n                    submissionId,\n                    text,\n                    defaultStep\n                );\n                setApiResponseToInput(this.currentStep, response);\n                await dispatchHistoryFromInput();\n            } catch (exception) {\n                await Notification.exception(exception);\n            }\n        });\n\n        document.querySelectorAll('textarea.pxaiwriter-student-data').forEach(async(element) => {\n            const step = getNumberFromAttribute(element, 'data-input-step');\n            if (step < 1) {\n                return;\n            }\n            const checksum = await getHashCode(element.value);\n            setChecksumByStep(step, checksum);\n        });\n    };\n\n    /**\n     * @param {number} step\n     * @param {*} response\n     */\n    const setApiResponseToInput = (step, response) => {\n        $(':button').prop('disabled', false);\n        if (response.hasOwnProperty('attempt_text')) {\n            setRemainingAttemptText(response.attempt_text);\n        }\n        if (response.hasOwnProperty('data')) {\n            const textArea = getStepTextArea(step);\n            if (textArea instanceof HTMLTextAreaElement) {\n                textArea.value = response.data;\n                textArea.dispatchEvent(new Event(\"change\"));\n            }\n        }\n        $('#loader').addClass('d-none');\n    };\n\n    /**\n     * @param {number} step\n     * @return {Promise<void>}\n     */\n    const recordHistory = async(step) => {\n        if (isDebugMode()) {\n            window.console.log(`${component}: Saving history...`);\n        }\n\n        if (step < 1) {\n            if (isDebugMode()) {\n                window.console.log(`${component}: Nothing to be save...`);\n            }\n            return;\n        }\n        const text = getStepInputText(step);\n        const checksum = await getHashCode(text);\n\n        if (checksum === getChecksumByStep(step)) {\n            if (isDebugMode()) {\n                window.console.log(`${component}: Nothing has been changed`);\n            }\n            return;\n        }\n\n        const response = await api.recordHistory(assignmentId, submissionId, text, step);\n        setChecksumByStep(step, response.checksum);\n\n        if (isDebugMode()) {\n            window.console.log(`${component}: Input text got recorded`);\n        }\n    };\n\n    const dispatchHistoryFromInput = async() => {\n        const elements = document.querySelectorAll(selectors.input);\n        for (const element of elements) {\n            if (element instanceof HTMLTextAreaElement) {\n                await recordHistory(getStepNumber(element));\n            }\n        }\n    };\n\n    return new EventCreator(assignmentId, submissionId, stepNumber);\n};\n"],"names":["assignmentId","submissionId","stepNumber","defaultStep","properties","checksumList","getChecksumByStep","step","setChecksumByStep","checksum","getNumberFromAttribute","element","attribute","value","getAttribute","number","Number","parseInt","isNaN","undefined","EventCreator","currentStep","selectedStart","selectedEnd","init","component","eventList","pageChange","stepTextSave","selectors","wrapper","doAIMagic","expandSelection","input","getStepInput","document","querySelector","HTMLTextAreaElement","copyTextFromPreviousStep","isDebugMode","window","console","log","currentStepInput","trim","length","previousStep","previousStepInput","preventPasting","target","elements","querySelectorAll","addEventListener","event","ctrlKey","key","preventDefault","stopPropagation","M","_M","cfg","_M$cfg","developerdebug","setRemainingAttemptText","text","label","HTMLElement","innerHTML","getStepTextArea","getStepNumber","dataset","_element$dataset","getStepTextAreaData","textArea","selectedText","substring","selectionStart","selectionEnd","getStepInputText","_getStepTextArea","validateInputText","modal","loadingData","prop","removeClass","getCurrentStepByPageChangeEvent","detail","_event$detail","getPreviousStepByPageChangeEvent","prevStep","_event$detail2","getHashCode","async","buffer","TextEncoder","encode","raw","crypto","subtle","digest","Array","from","Uint8Array","map","b","toString","padStart","join","e","requestAIApi","methodName","parameters","Ajax","call","methodname","args","api","expandText","selectStart","assignment_id","submission","selected_text","select_start","generateText","recordHistory","prototype","blurStepButton","button","classList","remove","currentStepButton","allStepButtons","add","textData","response","setApiResponseToInput","this","dispatchHistoryFromInput","exception","Notification","warn","forEach","hasOwnProperty","attempt_text","data","dispatchEvent","Event","addClass"],"mappings":"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"}