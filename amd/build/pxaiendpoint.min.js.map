{"version":3,"file":"pxaiendpoint.min.js","sources":["../src/pxaiendpoint.js"],"sourcesContent":["import $ from \"jquery\";\nimport Ajax from \"core/ajax\";\nimport Notification from \"core/notification\";\n\n/**\n * @param {number} assignmentId\n */\nexport const init = (\n    assignmentId\n) => {\n\n    const defaultStep = 1;\n\n    let EventCreator = function (assignmentId) {\n        this.currentStep = defaultStep;\n        this.selectedStart = 0;\n        this.selectedEnd = 0;\n        this.assignmentId = assignmentId;\n        this.init();\n    };\n\n    const component = 'assignsubmission_pxaiwriter';\n\n    const eventList = {\n        pageChange: 'page-change',\n        stepTextSave: 'step-save'\n    };\n\n    const selectors = {\n        wrapper: '.assignsubmission_pxaiwriter',\n        doAIMagic: '#pxaiwriter-do-ai-magic',\n        expandSelection: '#pxaiwriter-expand-selection'\n    };\n\n    /**\n     * @return {boolean}\n     */\n    const isDebugMode = () => {\n        return !!M?.cfg?.developerdebug;\n    };\n\n    /**\n     * @param {string} text\n     */\n    const setRemainingAttemptText = (text) => {\n        if (!text) {\n            return;\n        }\n        const label = document.querySelector('.remaining-ai-attempts');\n        if (label instanceof HTMLElement) {\n            label.innerHTML = text;\n        }\n    };\n\n    /**\n     * @param {number} step\n     * @return {HTMLTextAreaElement|null}\n     */\n    const getStepTextArea = (step) => {\n        return document.querySelector(`textarea[name=\"pxaiwriter-data-step-${step}\"]`);\n    };\n\n    /**\n     * @param {HTMLElement} element\n     * @return {number}\n     */\n    const getCurrentStep = (element) => {\n        const currentStep = Number.parseInt(element?.dataset?.step);\n        if (Number.isNaN(currentStep)) {\n            return 0;\n        }\n        return currentStep;\n    };\n\n    /**\n     * @param {number} step\n     * @return {string}\n     */\n    const getStepInputText = (step) => {\n        return getStepTextArea(step)?.value ?? '';\n    };\n\n    /**\n     * @param {string} text\n     * @return {boolean}\n     */\n    const validateInputText = (text) => {\n        if (!text || text.length === 0) {\n            $('#title-required-warning-modal').modal('show');\n            return false;\n        }\n        return true;\n    };\n\n    const loadingData = () => {\n        $(':button').prop('disabled', true);\n        $('#loader').removeClass('d-none');\n    };\n\n    /**\n     * @param {CustomEvent|Event} event\n     * @return {number}\n     */\n    const getCurrentStepFromPageChangeEvent = (event) => {\n        return event?.detail?.currentStep;\n    };\n\n    /**\n     * @template T\n     * @param {string} methodName\n     * @param {number} assignmentId\n     * @param {string} text\n     * @param {number} step\n     * @return {Promise<T>}\n     */\n    const requestAIApi = (\n        methodName,\n        assignmentId,\n        text,\n        step = defaultStep\n    ) => {\n        return Ajax.call([\n            {\n                methodname: methodName,\n                args: {\n                    assignment_id: assignmentId,\n                    step: step,\n                    text: text\n                }\n            },\n        ])[0];\n    };\n\n    const api = {\n        /**\n         * @template T\n         * @param {number} assignmentId\n         * @param {string} text\n         * @return {Promise<T>}\n         */\n        expandText: (assignmentId, text) => {\n            return requestAIApi(\n                'assignsubmission_pxaiwriter_expand_ai_text',\n                assignmentId,\n                text,\n                defaultStep\n            );\n        },\n        /**\n         * @template T\n         * @param {number} assignmentId\n         * @param {string} text\n         * @return {Promise<T>}\n         */\n        generateText: (assignmentId, text) => {\n            return requestAIApi(\n                'assignsubmission_pxaiwriter_generate_ai_text',\n                assignmentId,\n                text,\n                defaultStep\n            );\n        },\n        /**\n         * @template T\n         * @param {number} assignmentId\n         * @param {string} text\n         * @return {Promise<T>}\n         */\n        recordHistory: (assignmentId, text) => {\n            return requestAIApi(\n                'assignsubmission_pxaiwriter_record_history',\n                assignmentId,\n                text,\n                defaultStep\n            );\n        }\n    };\n\n    EventCreator.prototype.init = function () {\n        /**\n         * @param {HTMLElement} button\n         */\n        const highlightStepButton = (button) => {\n\n            if (!(button instanceof HTMLElement)) {\n                return;\n            }\n\n            button.classList.add('btn-outline-primary');\n            button.classList.remove('btn-outline-secondary');\n        };\n\n        /**\n         * @param {HTMLElement} button\n         */\n        const blurStepButton = (button) => {\n\n            if (!(button instanceof HTMLElement)) {\n                return;\n            }\n\n            button.classList.remove('btn-outline-primary');\n            button.classList.add('btn-outline-secondary');\n        };\n\n        const getSelectedTextAreaText = (step) => {\n\n            const textArea = getStepTextArea(step);\n\n            if (textArea instanceof HTMLTextAreaElement) {\n                this.selectedStart = textArea.selectionStart;\n                this.selectedEnd = textArea.selectionEnd;\n                return textArea.value.substring(this.selectedStart, this.selectedEnd);\n            }\n            else {\n                window.console.warn(`${component}: No text was selected`);\n            }\n\n            return '';\n        };\n\n        const wrapper = document.querySelector(selectors.wrapper);\n\n        wrapper.addEventListener(eventList.pageChange, (e) => {\n\n            if (isDebugMode()) {\n                window.console.log(`${component}: Step switched...`);\n            }\n\n            let step = getCurrentStepFromPageChangeEvent(e);\n            const currentStepButton = document.querySelector(`.step-page-button[data-step-number=\"${step}\"]`);\n\n            if (!currentStepButton) {\n                return;\n            }\n\n            const allStepButtons = document.querySelectorAll(`.step-page-button[data-step-number]`);\n            for (const button of allStepButtons) {\n                blurStepButton(button);\n            }\n            highlightStepButton(currentStepButton);\n        });\n\n        wrapper.addEventListener(eventList.stepTextSave, async (e) => {\n\n            if (isDebugMode()) {\n                window.console.log(`${component}: Saving history...`);\n            }\n\n            const step = getCurrentStepFromPageChangeEvent(e);\n            const text = getStepInputText(step);\n            await api.recordHistory(this.assignmentId, text, 1);\n\n            if (isDebugMode()) {\n                window.console.log(`${component}: Input text got recorded`);\n            }\n        });\n\n        document.querySelector(selectors.expandSelection).addEventListener(\"click\", async (e) => {\n\n            if (isDebugMode()) {\n                window.console.log(`${component}: Expand selected text...`);\n            }\n\n            const text = getSelectedTextAreaText(getCurrentStep(e.target));\n\n            if (!validateInputText(text)) {\n                if (isDebugMode()) {\n                    window.console.warn(`${component}: No selection detected`);\n                }\n                return;\n            }\n\n            loadingData();\n\n            try {\n                const response = await api.expandText(\n                    this.assignmentId,\n                    text,\n                    this.currentStep\n                );\n                setApiResponseToInput(this.currentStep, response);\n            }\n            catch (exception) {\n                await Notification.exception(exception);\n            }\n        });\n\n        document.querySelector(selectors.doAIMagic).addEventListener(\"click\", async (e) => {\n\n            if (isDebugMode()) {\n                window.console.log(`${component}: Do AI magic...`);\n            }\n\n            const text = getStepInputText(getCurrentStep(e.target));\n\n            if (!validateInputText(text)) {\n                if (isDebugMode()) {\n                    window.console.warn(`${component}: Input text is empty`);\n                }\n                return;\n            }\n\n            loadingData();\n\n            try {\n                const response = await api.generateText(\n                    this.assignmentId,\n                    text,\n                    this.currentStep\n                );\n                setApiResponseToInput(this.currentStep, response);\n            }\n            catch (exception) {\n                await Notification.exception(exception);\n            }\n        });\n    };\n\n    const setApiResponseToInput = (step, response) => {\n        $(':button').prop('disabled', false);\n        if (response.hasOwnProperty('attempt_text')) {\n            setRemainingAttemptText(response.attempt_text);\n        }\n        if (response.hasOwnProperty('data')) {\n            const textArea = getStepTextArea(step);\n            if (textArea instanceof HTMLTextAreaElement) {\n                textArea.value = response.data;\n                textArea.dispatchEvent(new Event(\"change\"));\n            }\n        }\n        $('#loader').addClass('d-none');\n    };\n\n    return new EventCreator(assignmentId);\n};\n"],"names":["assignmentId","EventCreator","currentStep","selectedStart","selectedEnd","init","component","eventList","selectors","isDebugMode","M","_M","cfg","_M$cfg","developerdebug","getStepTextArea","step","document","querySelector","getCurrentStep","element","Number","parseInt","dataset","_element$dataset","isNaN","getStepInputText","_getStepTextArea","value","validateInputText","text","length","modal","loadingData","prop","removeClass","getCurrentStepFromPageChangeEvent","event","detail","_event$detail","requestAIApi","methodName","Ajax","call","methodname","args","assignment_id","api","prototype","blurStepButton","button","HTMLElement","classList","remove","add","getSelectedTextAreaText","textArea","HTMLTextAreaElement","selectionStart","selectionEnd","substring","this","window","console","warn","wrapper","addEventListener","e","log","currentStepButton","allStepButtons","querySelectorAll","async","target","response","setApiResponseToInput","exception","Notification","hasOwnProperty","label","innerHTML","setRemainingAttemptText","attempt_text","data","dispatchEvent","Event","addClass"],"mappings":"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"}