{"version":3,"file":"pxaiendpoint.min.js","sources":["../src/pxaiendpoint.js"],"sourcesContent":["import $ from \"jquery\";\nimport Ajax from \"core/ajax\";\nimport Notification from \"core/notification\";\n\n/**\n * @typedef TextAreaData\n * @property {string} text\n * @property {string} selectedText\n * @property {number} selectionStart\n * @property {number} selectionEnd\n */\n\n/**\n * @param {number} assignmentId\n */\nexport const init = (\n    assignmentId\n) => {\n\n    const defaultStep = 1;\n\n    let EventCreator = function (assignmentId) {\n        this.currentStep = defaultStep;\n        this.selectedStart = 0;\n        this.selectedEnd = 0;\n        this.assignmentId = assignmentId;\n        this.init();\n    };\n\n    const component = 'assignsubmission_pxaiwriter';\n\n    const eventList = {\n        pageChange: 'page-change',\n        stepTextSave: 'step-save'\n    };\n\n    const selectors = {\n        wrapper: '.assignsubmission_pxaiwriter',\n        doAIMagic: '#pxaiwriter-do-ai-magic',\n        expandSelection: '#pxaiwriter-expand-selection'\n    };\n\n    /**\n     * @return {boolean}\n     */\n    const isDebugMode = () => {\n        return !!M?.cfg?.developerdebug;\n    };\n\n    /**\n     * @param {string} text\n     */\n    const setRemainingAttemptText = (text) => {\n        if (!text) {\n            return;\n        }\n        const label = document.querySelector('.remaining-ai-attempts');\n        if (label instanceof HTMLElement) {\n            label.innerHTML = text;\n        }\n    };\n\n    /**\n     * @param {number} step\n     * @return {HTMLTextAreaElement|null}\n     */\n    const getStepTextArea = (step) => {\n        return document.querySelector(`textarea[name=\"pxaiwriter-data-step-${step}\"]`);\n    };\n\n    /**\n     * @param {HTMLElement} element\n     * @return {number}\n     */\n    const getCurrentStep = (element) => {\n        const currentStep = Number.parseInt(element?.dataset?.step);\n        if (Number.isNaN(currentStep)) {\n            return 0;\n        }\n        return currentStep;\n    };\n\n    /**\n     * @param {number} step\n     * @return {TextAreaData|null}\n     */\n    const getStepTextAreaData = (step) => {\n        const textArea = getStepTextArea(step);\n        if (!(textArea instanceof HTMLTextAreaElement)) {\n            return null;\n        }\n        return {\n            text: textArea.value,\n            selectedText: textArea.value.substring(textArea.selectionStart, textArea.selectionEnd),\n            selectionStart: textArea.selectionStart,\n            selectionEnd: textArea.selectionEnd\n        };\n    };\n\n    /**\n     * @param {number} step\n     * @return {string}\n     */\n    const getStepInputText = (step) => {\n        return getStepTextArea(step)?.value ?? '';\n    };\n\n    /**\n     * @param {string} text\n     * @return {boolean}\n     */\n    const validateInputText = (text) => {\n        if (!text || text.length === 0) {\n            $('#title-required-warning-modal').modal('show');\n            return false;\n        }\n        return true;\n    };\n\n    const loadingData = () => {\n        $(':button').prop('disabled', true);\n        $('#loader').removeClass('d-none');\n    };\n\n    /**\n     * @param {CustomEvent|Event} event\n     * @return {number}\n     */\n    const getCurrentStepFromPageChangeEvent = (event) => {\n        return event?.detail?.currentStep;\n    };\n\n    /**\n     * @template T\n     * @param {string} methodName\n     * @param {*} parameters\n     * @return {Promise<T>}\n     */\n    const requestAIApi = (methodName, parameters = {}) => {\n        return Ajax.call([\n            {\n                methodname: methodName,\n                args: parameters\n            },\n        ])[0];\n    };\n\n    const api = {\n        /**\n         * @template T\n         * @param {number} assignmentId\n         * @param {string} text\n         * @param {string} selectedText\n         * @param {number} selectStart\n         * @return {Promise<T>}\n         */\n        expandText: (assignmentId, text, selectedText, selectStart) => {\n            return requestAIApi(\n                'assignsubmission_pxaiwriter_expand_ai_text', {\n                assignment_id: assignmentId,\n                text: text,\n                selected_text: selectedText,\n                select_start: selectStart,\n                step: defaultStep\n            });\n        },\n        /**\n         * @template T\n         * @param {number} assignmentId\n         * @param {string} text\n         * @return {Promise<T>}\n         */\n        generateText: (assignmentId, text) => {\n            return requestAIApi('assignsubmission_pxaiwriter_generate_ai_text', {\n                assignment_id: assignmentId,\n                text: text,\n                step: defaultStep\n            });\n        },\n        /**\n         * @template T\n         * @param {number} assignmentId\n         * @param {string} text\n         * @return {Promise<T>}\n         */\n        recordHistory: (assignmentId, text) => {\n            return requestAIApi('assignsubmission_pxaiwriter_record_history', {\n                assignment_id: assignmentId,\n                text: text,\n                step: defaultStep\n            });\n        }\n    };\n\n    EventCreator.prototype.init = function () {\n        /**\n         * @param {HTMLElement} button\n         */\n        const highlightStepButton = (button) => {\n\n            if (!(button instanceof HTMLElement)) {\n                return;\n            }\n\n            button.classList.add('btn-outline-primary');\n            button.classList.remove('btn-outline-secondary');\n        };\n\n        /**\n         * @param {HTMLElement} button\n         */\n        const blurStepButton = (button) => {\n\n            if (!(button instanceof HTMLElement)) {\n                return;\n            }\n\n            button.classList.remove('btn-outline-primary');\n            button.classList.add('btn-outline-secondary');\n        };\n\n        const wrapper = document.querySelector(selectors.wrapper);\n\n        wrapper?.addEventListener(eventList.pageChange, (e) => {\n\n            if (isDebugMode()) {\n                window.console.log(`${component}: Step switched...`);\n            }\n\n            let step = getCurrentStepFromPageChangeEvent(e);\n            const currentStepButton = document.querySelector(`.step-page-button[data-step-number=\"${step}\"]`);\n\n            if (!currentStepButton) {\n                return;\n            }\n\n            const allStepButtons = document.querySelectorAll(`.step-page-button[data-step-number]`);\n            for (const button of allStepButtons) {\n                blurStepButton(button);\n            }\n            highlightStepButton(currentStepButton);\n        });\n\n        wrapper?.addEventListener(eventList.stepTextSave, async (e) => {\n\n            if (isDebugMode()) {\n                window.console.log(`${component}: Saving history...`);\n            }\n\n            const step = getCurrentStepFromPageChangeEvent(e);\n            const text = getStepInputText(step);\n            await api.recordHistory(this.assignmentId, text, 1);\n\n            if (isDebugMode()) {\n                window.console.log(`${component}: Input text got recorded`);\n            }\n        });\n\n        document.querySelector(selectors.expandSelection)?.addEventListener(\"click\", async (e) => {\n\n            if (isDebugMode()) {\n                window.console.log(`${component}: Expand selected text...`);\n            }\n            const step = getCurrentStep(e.target);\n            const textData = getStepTextAreaData(step);\n\n            const text = textData.text;\n            const selectedText = textData?.selectedText;\n\n            if (!validateInputText(selectedText)) {\n                if (isDebugMode()) {\n                    window.console.warn(`${component}: No selection detected`);\n                }\n                return;\n            }\n\n            loadingData();\n\n            try {\n                const response = await api.expandText(\n                    this.assignmentId,\n                    text,\n                    selectedText,\n                    textData.selectionStart\n                );\n                setApiResponseToInput(this.currentStep, response);\n            }\n            catch (exception) {\n                await Notification.exception(exception);\n            }\n        });\n\n        document.querySelector(selectors.doAIMagic)?.addEventListener(\"click\", async (e) => {\n\n            if (isDebugMode()) {\n                window.console.log(`${component}: Do AI magic...`);\n            }\n\n            const text = getStepInputText(getCurrentStep(e.target));\n\n            if (!validateInputText(text)) {\n                if (isDebugMode()) {\n                    window.console.warn(`${component}: Input text is empty`);\n                }\n                return;\n            }\n\n            loadingData();\n\n            try {\n                const response = await api.generateText(\n                    this.assignmentId,\n                    text,\n                    this.currentStep\n                );\n                setApiResponseToInput(this.currentStep, response);\n            }\n            catch (exception) {\n                await Notification.exception(exception);\n            }\n        });\n    };\n\n    const setApiResponseToInput = (step, response) => {\n        $(':button').prop('disabled', false);\n        if (response.hasOwnProperty('attempt_text')) {\n            setRemainingAttemptText(response.attempt_text);\n        }\n        if (response.hasOwnProperty('data')) {\n            const textArea = getStepTextArea(step);\n            if (textArea instanceof HTMLTextAreaElement) {\n                textArea.value = response.data;\n                textArea.dispatchEvent(new Event(\"change\"));\n            }\n        }\n        $('#loader').addClass('d-none');\n    };\n\n    return new EventCreator(assignmentId);\n};\n"],"names":["assignmentId","EventCreator","currentStep","selectedStart","selectedEnd","init","component","eventList","selectors","isDebugMode","M","_M","cfg","_M$cfg","developerdebug","getStepTextArea","step","document","querySelector","getCurrentStep","element","Number","parseInt","dataset","_element$dataset","isNaN","getStepInputText","_getStepTextArea","value","validateInputText","text","length","modal","loadingData","prop","removeClass","getCurrentStepFromPageChangeEvent","event","detail","_event$detail","requestAIApi","methodName","parameters","Ajax","call","methodname","args","api","selectedText","selectStart","assignment_id","selected_text","select_start","prototype","blurStepButton","button","HTMLElement","classList","remove","add","wrapper","addEventListener","e","window","console","log","currentStepButton","allStepButtons","querySelectorAll","async","this","textData","textArea","HTMLTextAreaElement","substring","selectionStart","selectionEnd","getStepTextAreaData","target","response","setApiResponseToInput","exception","Notification","warn","hasOwnProperty","label","innerHTML","setRemainingAttemptText","attempt_text","data","dispatchEvent","Event","addClass"],"mappings":"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"}