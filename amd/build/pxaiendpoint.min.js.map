{"version":3,"file":"pxaiendpoint.min.js","sources":["../src/pxaiendpoint.js"],"sourcesContent":["import $ from \"jquery\";\nimport Ajax from \"core/ajax\";\nimport Notification from \"core/notification\";\n\n/**\n * @typedef TextAreaData\n * @property {string} text\n * @property {string} selectedText\n * @property {number} selectionStart\n * @property {number} selectionEnd\n */\n\n/**\n * @param {number} assignmentId\n * @param {number} submissionId\n * @param {number} stepNumber\n */\nexport const init = (\n    assignmentId,\n    submissionId,\n    stepNumber = 1\n) => {\n\n    const defaultStep = 1;\n\n    /**\n     * @param {number} assignmentId\n     * @param {number} submissionId\n     * @param {number} stepNumber\n     * @constructor\n     */\n    let EventCreator = function (assignmentId, submissionId, stepNumber) {\n        this.currentStep = stepNumber;\n        this.selectedStart = 0;\n        this.selectedEnd = 0;\n        this.assignmentId = assignmentId;\n        this.submissionId = submissionId;\n        this.init();\n    };\n\n    const component = 'assignsubmission_pxaiwriter';\n\n    const eventList = {\n        pageChange: 'page-change',\n        stepTextSave: 'step-save'\n    };\n\n    const selectors = {\n        wrapper: '.assignsubmission_pxaiwriter',\n        doAIMagic: '#pxaiwriter-do-ai-magic',\n        expandSelection: '#pxaiwriter-expand-selection',\n        input: '.pxaiwriter-student-data[data-input-step]',\n    };\n\n    /**\n     * @param {string} target\n     */\n    const preventPasting = (target) => {\n        const elements = document.querySelectorAll(target);\n        if (!elements) {\n            return;\n        }\n        for (const element of elements) {\n            element.addEventListener('keydown', (event) => {\n                if (event.ctrlKey && event.key === 'v') {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    return false;\n                }\n            });\n            element.addEventListener('paste', (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n                return false;\n            });\n        }\n    };\n\n    /**\n     * @return {boolean}\n     */\n    const isDebugMode = () => {\n        return !!M?.cfg?.developerdebug;\n    };\n\n    /**\n     * @param {string} text\n     */\n    const setRemainingAttemptText = (text) => {\n        if (!text) {\n            return;\n        }\n        const label = document.querySelector('.remaining-ai-attempts');\n        if (label instanceof HTMLElement) {\n            label.innerHTML = text;\n        }\n    };\n\n    /**\n     * @param {number} step\n     * @return {HTMLTextAreaElement|null}\n     */\n    const getStepTextArea = (step) => {\n        return document.querySelector(`textarea[name=\"pxaiwriter-data-step-${step}\"]`);\n    };\n\n    /**\n     * @param {HTMLElement} element\n     * @return {number}\n     */\n    const getStepNumber = (element) => {\n        const currentStep = Number.parseInt(element?.dataset?.step);\n        if (Number.isNaN(currentStep)) {\n            return 0;\n        }\n        return currentStep;\n    };\n\n    /**\n     * @param {number} step\n     * @return {TextAreaData|null}\n     */\n    const getStepTextAreaData = (step) => {\n        const textArea = getStepTextArea(step);\n        if (!(textArea instanceof HTMLTextAreaElement)) {\n            return null;\n        }\n        return {\n            text: textArea.value,\n            selectedText: textArea.value.substring(textArea.selectionStart, textArea.selectionEnd),\n            selectionStart: textArea.selectionStart,\n            selectionEnd: textArea.selectionEnd\n        };\n    };\n\n    /**\n     * @param {number} step\n     * @return {string}\n     */\n    const getStepInputText = (step) => {\n        return getStepTextArea(step)?.value ?? '';\n    };\n\n    /**\n     * @param {string} text\n     * @return {boolean}\n     */\n    const validateInputText = (text) => {\n        if (!text || text.length === 0) {\n            $('#title-required-warning-modal').modal('show');\n            return false;\n        }\n        return true;\n    };\n\n    const loadingData = () => {\n        $(':button').prop('disabled', true);\n        $('#loader').removeClass('d-none');\n    };\n\n    /**\n     * @param {CustomEvent|Event} event\n     * @return {number}\n     */\n    const getCurrentStepByPageChangeEvent = (event) => {\n        return event?.detail?.currentStep;\n    };\n\n    /**\n     *\n     * @param {CustomEvent|Event} event\n     * @return {number}\n     */\n    const getPreviousStepByPageChangeEvent = (event) => {\n        const currentStep = getCurrentStepByPageChangeEvent(event);\n        const prevStep = event?.detail?.prevStep;\n        return currentStep === prevStep ? 0 : prevStep;\n    };\n\n    /**\n     * @param {string} text\n     * @return {Promise<string|null>}\n     */\n    const getHashCode = async (text) => {\n        if (!text) {\n            return null;\n        }\n        try {\n            const encoder = new TextEncoder();\n            const buffer = encoder.encode(text);\n            const raw = await crypto.subtle.digest(\"SHA-256\", buffer);\n            return Array.from(new Uint8Array(raw)).map(b => b.toString(16).padStart(2, \"0\")).join(\"\");\n        }\n        catch (e) {}\n        return null;\n    };\n\n    /**\n     * @template T\n     * @param {string} methodName\n     * @param {*} parameters\n     * @return {Promise<T>}\n     */\n    const requestAIApi = (methodName, parameters = {}) => {\n        return Ajax.call([\n            {\n                methodname: methodName,\n                args: parameters\n            },\n        ])[0];\n    };\n\n    const api = {\n        /**\n         * @template T\n         * @param {number} assignmentId\n         * @param {number} submissionId\n         * @param {string} text\n         * @param {string} selectedText\n         * @param {number} selectStart\n         * @param {number} step\n         * @return {Promise<T>}\n         */\n        expandText: (assignmentId, submissionId, text, selectedText, selectStart, step = 1) => {\n            return requestAIApi(\n                'assignsubmission_pxaiwriter_expand_ai_text', {\n                assignment_id: assignmentId,\n                submission: submissionId,\n                text: text,\n                selected_text: selectedText,\n                select_start: selectStart,\n                step: step\n            });\n        },\n        /**\n         * @template T\n         * @param {number} assignmentId\n         * @param {number} submissionId\n         * @param {string} text\n         * @param {number} step\n         * @return {Promise<T>}\n         */\n        generateText: (assignmentId, submissionId, text, step = 1) => {\n            return requestAIApi('assignsubmission_pxaiwriter_generate_ai_text', {\n                assignment_id: assignmentId,\n                submission: submissionId,\n                text: text,\n                step: step\n            });\n        },\n        /**\n         * @template T\n         * @param {number} assignmentId\n         * @param {number} submissionId\n         * @param {string} text\n         * @param {number} step\n         * @return {Promise<T>}\n         */\n        recordHistory: (assignmentId, submissionId, text, step = 1) => {\n            return requestAIApi('assignsubmission_pxaiwriter_record_history', {\n                assignment_id: assignmentId,\n                submission: submissionId,\n                text: text,\n                step: step\n            });\n        }\n    };\n\n    EventCreator.prototype.init = function () {\n\n        preventPasting(selectors.input);\n\n        /**\n         * @param {HTMLElement} button\n         */\n        const highlightStepButton = (button) => {\n\n            if (!(button instanceof HTMLElement)) {\n                return;\n            }\n\n            button.classList.add('btn-outline-primary');\n            button.classList.remove('btn-outline-secondary');\n        };\n\n        /**\n         * @param {HTMLElement} button\n         */\n        const blurStepButton = (button) => {\n\n            if (!(button instanceof HTMLElement)) {\n                return;\n            }\n\n            button.classList.remove('btn-outline-primary');\n            button.classList.add('btn-outline-secondary');\n        };\n\n        const wrapper = document.querySelector(selectors.wrapper);\n\n        wrapper?.addEventListener(eventList.pageChange, (e) => {\n\n            if (isDebugMode()) {\n                window.console.log(`${component}: Step switched...`);\n            }\n\n            let step = getCurrentStepByPageChangeEvent(e);\n            const currentStepButton = document.querySelector(`.step-page-button[data-step-number=\"${step}\"]`);\n\n            if (!currentStepButton) {\n                return;\n            }\n\n            const allStepButtons = document.querySelectorAll(`.step-page-button[data-step-number]`);\n            for (const button of allStepButtons) {\n                blurStepButton(button);\n            }\n            highlightStepButton(currentStepButton);\n        });\n\n        wrapper?.addEventListener(eventList.pageChange, async (e) => {\n            if (isDebugMode()) {\n                window.console.log(`${component}: Page changed`);\n            }\n\n            const step = getPreviousStepByPageChangeEvent(e);\n            await recordHistory(step);\n        });\n\n        document.querySelector(selectors.expandSelection)?.addEventListener(\"click\", async (e) => {\n\n            if (isDebugMode()) {\n                window.console.log(`${component}: Expand selected text...`);\n            }\n            const step = getStepNumber(e.target);\n            const textData = getStepTextAreaData(step);\n\n            const text = textData.text;\n            const selectedText = textData?.selectedText;\n\n            if (!validateInputText(selectedText)) {\n                if (isDebugMode()) {\n                    window.console.warn(`${component}: No selection detected`);\n                }\n                return;\n            }\n\n            loadingData();\n\n            try {\n                const response = await api.expandText(\n                    this.assignmentId,\n                    this.submissionId,\n                    text,\n                    selectedText,\n                    textData.selectionStart\n                );\n                setApiResponseToInput(this.currentStep, response);\n                await dispatchHistoryFromInput();\n            }\n            catch (exception) {\n                await Notification.exception(exception);\n            }\n        });\n\n        document.querySelector(selectors.doAIMagic)?.addEventListener(\"click\", async (e) => {\n\n            if (isDebugMode()) {\n                window.console.log(`${component}: Do AI magic...`);\n            }\n\n            const text = getStepInputText(getStepNumber(e.target));\n\n            if (!validateInputText(text)) {\n                if (isDebugMode()) {\n                    window.console.warn(`${component}: Input text is empty`);\n                }\n                return;\n            }\n\n            loadingData();\n\n            try {\n                const response = await api.generateText(\n                    this.assignmentId,\n                    this.submissionId,\n                    text,\n                    defaultStep\n                );\n                setApiResponseToInput(this.currentStep, response);\n                await dispatchHistoryFromInput();\n            }\n            catch (exception) {\n                await Notification.exception(exception);\n            }\n        });\n    };\n\n    /**\n     * @param {number} step\n     * @param {*} response\n     */\n    const setApiResponseToInput = (step, response) => {\n        $(':button').prop('disabled', false);\n        if (response.hasOwnProperty('attempt_text')) {\n            setRemainingAttemptText(response.attempt_text);\n        }\n        if (response.hasOwnProperty('data')) {\n            const textArea = getStepTextArea(step);\n            if (textArea instanceof HTMLTextAreaElement) {\n                if (step === defaultStep) {\n                    distributeTextToInputs(response.data);\n                }\n                else {\n                    textArea.value = response.data;\n                    textArea.dispatchEvent(new Event(\"change\"));\n                }\n            }\n        }\n        $('#loader').addClass('d-none');\n    };\n\n    /**\n     * @param {string} text\n     */\n    const distributeTextToInputs = (text) => {\n        const elements = document.querySelectorAll(selectors.input);\n        for (const element of elements) {\n            if (element instanceof HTMLTextAreaElement) {\n                element.value = text;\n                element.dispatchEvent(new Event(\"change\"));\n            }\n        }\n    };\n\n    /**\n     * @param {number} step\n     * @return {Promise<void>}\n     */\n    const recordHistory = async (step) => {\n        if (isDebugMode()) {\n            window.console.log(`${component}: Saving history...`);\n        }\n\n        if (step < 1) {\n            if (isDebugMode()) {\n                window.console.log(`${component}: Nothing to be save...`);\n            }\n            return;\n        }\n        const text = getStepInputText(step);\n        const response = await api.recordHistory(this.assignmentId, this.submissionId, text, step);\n\n        if (isDebugMode() && response.hasOwnProperty(\"checksum\")) {\n            if (!response.checksum) {\n                window.console.log(`${component}: Cannot determine the changes in the data`);\n                return;\n            }\n\n            let textChecksum = await getHashCode(text);\n            textChecksum = textChecksum.toLocaleLowerCase();\n            if (response.checksum === textChecksum) {\n                window.console.log(`${component}: Input text got recorded`);\n            }\n            else {\n                window.console.log(`${component}: Nothing has been changed`);\n            }\n        }\n    };\n\n    const dispatchHistoryFromInput = async () => {\n        const elements = document.querySelectorAll(selectors.input);\n        for (const element of elements) {\n            if (element instanceof HTMLTextAreaElement) {\n                await recordHistory(getStepNumber(element));\n            }\n        }\n    };\n\n    return new EventCreator(assignmentId,  submissionId, stepNumber);\n};\n"],"names":["assignmentId","submissionId","stepNumber","defaultStep","EventCreator","currentStep","selectedStart","selectedEnd","init","component","eventList","pageChange","stepTextSave","selectors","wrapper","doAIMagic","expandSelection","input","preventPasting","target","elements","document","querySelectorAll","element","addEventListener","event","ctrlKey","key","preventDefault","stopPropagation","isDebugMode","M","_M","cfg","_M$cfg","developerdebug","setRemainingAttemptText","text","label","querySelector","HTMLElement","innerHTML","getStepTextArea","step","getStepNumber","Number","parseInt","dataset","_element$dataset","isNaN","getStepTextAreaData","textArea","HTMLTextAreaElement","value","selectedText","substring","selectionStart","selectionEnd","getStepInputText","_getStepTextArea","validateInputText","length","modal","loadingData","prop","removeClass","getCurrentStepByPageChangeEvent","detail","_event$detail","getPreviousStepByPageChangeEvent","prevStep","_event$detail2","getHashCode","async","buffer","TextEncoder","encode","raw","crypto","subtle","digest","Array","from","Uint8Array","map","b","toString","padStart","join","e","requestAIApi","methodName","parameters","Ajax","call","methodname","args","api","expandText","selectStart","assignment_id","submission","selected_text","select_start","generateText","recordHistory","prototype","blurStepButton","button","classList","remove","add","window","console","log","currentStepButton","allStepButtons","textData","response","this","setApiResponseToInput","dispatchHistoryFromInput","exception","Notification","warn","hasOwnProperty","attempt_text","distributeTextToInputs","data","dispatchEvent","Event","addClass","checksum","textChecksum","toLocaleLowerCase"],"mappings":"ocAiBoB,SAChBA,aACAC,kBACAC,kEAAa,QAGPC,YAAc,MAQhBC,aAAe,SAAUJ,aAAcC,aAAcC,iBAChDG,YAAcH,gBACdI,cAAgB,OAChBC,YAAc,OACdP,aAAeA,kBACfC,aAAeA,kBACfO,cAGHC,UAAY,8BAEZC,UAAY,CACdC,WAAY,cACZC,aAAc,aAGZC,UAAY,CACdC,QAAS,+BACTC,UAAW,0BACXC,gBAAiB,+BACjBC,MAAO,6CAMLC,eAAkBC,eACdC,SAAWC,SAASC,iBAAiBH,WACtCC,aAGA,MAAMG,WAAWH,SAClBG,QAAQC,iBAAiB,WAAYC,WAC7BA,MAAMC,SAAyB,MAAdD,MAAME,WACvBF,MAAMG,iBACNH,MAAMI,mBACC,KAGfN,QAAQC,iBAAiB,SAAUC,QAC/BA,MAAMG,iBACNH,MAAMI,mBACC,MAQbC,YAAc,sCACPC,gCAAAC,GAAGC,wBAAHC,OAAQC,iBAMfC,wBAA2BC,WACxBA,kBAGCC,MAAQjB,SAASkB,cAAc,0BACjCD,iBAAiBE,cACjBF,MAAMG,UAAYJ,OAQpBK,gBAAmBC,MACdtB,SAASkB,4DAAqDI,YAOnEC,cAAiBrB,qCACblB,YAAcwC,OAAOC,SAASvB,MAAAA,kCAAAA,QAASwB,2CAATC,iBAAkBL,aAClDE,OAAOI,MAAM5C,aACN,EAEJA,aAOL6C,oBAAuBP,aACnBQ,SAAWT,gBAAgBC,aAC3BQ,oBAAoBC,oBAGnB,CACHf,KAAMc,SAASE,MACfC,aAAcH,SAASE,MAAME,UAAUJ,SAASK,eAAgBL,SAASM,cACzED,eAAgBL,SAASK,eACzBC,aAAcN,SAASM,cANhB,MAcTC,iBAAoBf,gHACfD,gBAAgBC,yCAAhBgB,iBAAuBN,6DAAS,IAOrCO,kBAAqBvB,SAClBA,MAAwB,IAAhBA,KAAKwB,8BACZ,iCAAiCC,MAAM,SAClC,GAKTC,YAAc,yBACd,WAAWC,KAAK,YAAY,uBAC5B,WAAWC,YAAY,WAOvBC,gCAAmCzC,iCAC9BA,MAAAA,6BAAAA,MAAO0C,uCAAPC,cAAe/D,aAQpBgE,iCAAoC5C,iCAChCpB,YAAc6D,gCAAgCzC,OAC9C6C,SAAW7C,MAAAA,8BAAAA,MAAO0C,wCAAPI,eAAeD,gBACzBjE,cAAgBiE,SAAW,EAAIA,UAOpCE,YAAcC,MAAAA,WACXpC,YACM,eAIDqC,QADU,IAAIC,aACGC,OAAOvC,MACxBwC,UAAYC,OAAOC,OAAOC,OAAO,UAAWN,eAC3CO,MAAMC,KAAK,IAAIC,WAAWN,MAAMO,KAAIC,GAAKA,EAAEC,SAAS,IAAIC,SAAS,EAAG,OAAMC,KAAK,IAE1F,MAAOC,WACA,MASLC,aAAe,SAACC,gBAAYC,kEAAa,UACpCC,cAAKC,KAAK,CACb,CACIC,WAAYJ,WACZK,KAAMJ,cAEX,IAGDK,IAAM,CAWRC,WAAY,SAAClG,aAAcC,aAAcoC,KAAMiB,aAAc6C,iBAAaxD,4DAAO,SACtE+C,aACH,6CAA8C,CAC9CU,cAAepG,aACfqG,WAAYpG,aACZoC,KAAMA,KACNiE,cAAehD,aACfiD,aAAcJ,YACdxD,KAAMA,QAWd6D,aAAc,SAACxG,aAAcC,aAAcoC,UAAMM,4DAAO,SAC7C+C,aAAa,+CAAgD,CAChEU,cAAepG,aACfqG,WAAYpG,aACZoC,KAAMA,KACNM,KAAMA,QAWd8D,cAAe,SAACzG,aAAcC,aAAcoC,UAAMM,4DAAO,SAC9C+C,aAAa,6CAA8C,CAC9DU,cAAepG,aACfqG,WAAYpG,aACZoC,KAAMA,KACNM,KAAMA,SAKlBvC,aAAasG,UAAUlG,KAAO,4DAE1BU,eAAeL,UAAUI,aAkBnB0F,eAAkBC,SAEdA,kBAAkBpE,cAIxBoE,OAAOC,UAAUC,OAAO,uBACxBF,OAAOC,UAAUE,IAAI,2BAGnBjG,QAAUO,SAASkB,cAAc1B,UAAUC,SAEjDA,MAAAA,SAAAA,QAASU,iBAAiBd,UAAUC,YAAa8E,IAEzC3D,eACAkF,OAAOC,QAAQC,cAAOzG,qCAGtBkC,KAAOuB,gCAAgCuB,SACrC0B,kBAAoB9F,SAASkB,4DAAqDI,gBAEnFwE,+BAICC,eAAiB/F,SAASC,4DAC3B,MAAMsF,UAAUQ,eACjBT,eAAeC,QAxCMA,IAAAA,QAAAA,OA0CLO,6BAxCI3E,cAIxBoE,OAAOC,UAAUE,IAAI,uBACrBH,OAAOC,UAAUC,OAAO,6BAsC5BhG,MAAAA,SAAAA,QAASU,iBAAiBd,UAAUC,YAAY8D,MAAAA,IACxC3C,eACAkF,OAAOC,QAAQC,cAAOzG,mCAGpBkC,KAAO0B,iCAAiCoB,SACxCgB,cAAc9D,uCAGxBtB,SAASkB,cAAc1B,UAAUG,yEAAkBQ,iBAAiB,SAASiD,MAAAA,IAErE3C,eACAkF,OAAOC,QAAQC,cAAOzG,8CAEpBkC,KAAOC,cAAc6C,EAAEtE,QACvBkG,SAAWnE,oBAAoBP,MAE/BN,KAAOgF,SAAShF,KAChBiB,aAAe+D,MAAAA,gBAAAA,SAAU/D,gBAE1BM,kBAAkBN,eAOvBS,wBAGUuD,eAAiBrB,IAAIC,WACvBqB,KAAKvH,aACLuH,KAAKtH,aACLoC,KACAiB,aACA+D,SAAS7D,gBAEbgE,sBAAsBD,KAAKlH,YAAaiH,gBAClCG,2BAEV,MAAOC,iBACGC,sBAAaD,UAAUA,iBApBzB5F,eACAkF,OAAOC,QAAQW,eAAQnH,wEAuBnCY,SAASkB,cAAc1B,UAAUE,qEAAYS,iBAAiB,SAASiD,MAAAA,IAE/D3C,eACAkF,OAAOC,QAAQC,cAAOzG,qCAGpB4B,KAAOqB,iBAAiBd,cAAc6C,EAAEtE,YAEzCyC,kBAAkBvB,OAOvB0B,wBAGUuD,eAAiBrB,IAAIO,aACvBe,KAAKvH,aACLuH,KAAKtH,aACLoC,KACAlC,aAEJqH,sBAAsBD,KAAKlH,YAAaiH,gBAClCG,2BAEV,MAAOC,iBACGC,sBAAaD,UAAUA,iBAnBzB5F,eACAkF,OAAOC,QAAQW,eAAQnH,8CA2BjC+G,sBAAwB,CAAC7E,KAAM2E,mCAC/B,WAAWtD,KAAK,YAAY,GAC1BsD,SAASO,eAAe,iBACxBzF,wBAAwBkF,SAASQ,cAEjCR,SAASO,eAAe,QAAS,OAC3B1E,SAAWT,gBAAgBC,MAC7BQ,oBAAoBC,sBAChBT,OAASxC,YACT4H,uBAAuBT,SAASU,OAGhC7E,SAASE,MAAQiE,SAASU,KAC1B7E,SAAS8E,cAAc,IAAIC,MAAM,iCAI3C,WAAWC,SAAS,WAMpBJ,uBAA0B1F,aACtBjB,SAAWC,SAASC,iBAAiBT,UAAUI,WAChD,MAAMM,WAAWH,SACdG,mBAAmB6B,sBACnB7B,QAAQ8B,MAAQhB,KAChBd,QAAQ0G,cAAc,IAAIC,MAAM,aAStCzB,cAAgBhC,MAAAA,UACd3C,eACAkF,OAAOC,QAAQC,cAAOzG,kCAGtBkC,KAAO,cACHb,eACAkF,OAAOC,QAAQC,cAAOzG,6CAIxB4B,KAAOqB,iBAAiBf,MACxB2E,eAAiBrB,IAAIQ,wBAAmBzG,uBAAmBC,aAAcoC,KAAMM,SAEjFb,eAAiBwF,SAASO,eAAe,YAAa,KACjDP,SAASc,qBACVpB,OAAOC,QAAQC,cAAOzG,6DAItB4H,mBAAqB7D,YAAYnC,MACrCgG,aAAeA,aAAaC,oBACxBhB,SAASc,WAAaC,aACtBrB,OAAOC,QAAQC,cAAOzG,wCAGtBuG,OAAOC,QAAQC,cAAOzG,2CAK5BgH,yBAA2BhD,gBACvBrD,SAAWC,SAASC,iBAAiBT,UAAUI,WAChD,MAAMM,WAAWH,SACdG,mBAAmB6B,2BACbqD,cAAc7D,cAAcrB,kBAKvC,IAAInB,aAAaJ,aAAeC,aAAcC"}