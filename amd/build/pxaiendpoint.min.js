define(['jquery', "core/ajax", "core/str", 'core/templates', 'core/modal_factory', "core/modal_events"], function ($, Ajax, Str, Templates, ModalFactory, ModalEvents) {
    var EventCreator = function (id, cmid, contextid, steps_data) {

        this.instanceid = id;
        this.cmid = cmid;
        this.contextId = contextid;
        this.stepsData = steps_data;

        console.log(this.instanceid);
        console.log(this.cmid);
        console.log(this.contextId);
        console.log(this.stepsData);

        this.init();
    }

    EventCreator.prototype.init = function () {
        $('.createnew').on('click', function () {

        }.bind(this));

        // assignsubmission_pxaiwriter_student_data

        $(".actions-container").on("click", '#pxaiwriter-expand-selection', function (e) {

            const currentStep = $(e.target).data("input-step");
            const value = $(e.target).val();

            console.log(e.target)

            let formData = new FormData();
            formData.append('text', "hello dolly!");

            // var promises = Ajax.call([
            //     {
            //         methodname: "mod_mod_assign_submission_pxaiwriter_expand",
            //         args: { contextid: this.contextId, jsondata: JSON.stringify(formData) },
            //         done: this.handleResponse.bind(this),
            //         fail: this.handleFailure.bind(this),
            //     },
            // ]);
            alert("meemaaaw")
        }.bind(this));

        $(".actions-container").on("click", '#pxaiwriter-do-ai-magic', function (e) {

            const currentStep = $(e.target).data("input-step");
            const value = $(e.target).val();

            console.log(e.target)

            let formData = new FormData();
            formData.append('text', "hello dolly!");

            // var promises = Ajax.call([
            //     {
            //         methodname: "mod_mod_assign_submission_pxaiwriter_doaimagic",
            //         args: { contextid: this.contextId, jsondata: JSON.stringify(formData) },
            //         done: this.handleResponse.bind(this),
            //         fail: this.handleFailure.bind(this),
            //     },
            // ]);
            alert("meemaaaw do")
        }.bind(this));

    }

    EventCreator.prototype.createNewEvent = async function (root) {

        var promises = Ajax.call([
            {
                methodname: "mod_mod_assign_submission_pxaiwriter_doaimagic",
                args: { contextid: this.contextId, jsonformdata: JSON.stringify(formData) },
                done: this.handleResponse.bind(this),
                fail: this.handleFailure.bind(this),
            },
        ]);
    }

    EventCreator.prototype.handleResponse = function (response) {
        responseObj = JSON.parse(response);
        if (responseObj.success == false) {
            let error = responseObj.message;
            if (responseObj.errors && responseObj.errors.overlapping_events_error) {
                error = responseObj.errors.overlapping_events_error;
            }
            $('#error-text').css('display', 'block');
            $('#error-text').text(error);
            $('[data-action="save"]').prop('disabled', false);
        }

        else {
            window.location.reload();
        }
    }

    EventCreator.prototype.handleFailure = function (data) {
        $('#error-text').css('display', 'block');
        $('#error-text').text("An error occurred during creating event");
        $('[data-action="save"]').prop('disabled', false);
    }

    return {
        init: function (id, cmid, contextid, steps_data) {
            return new EventCreator(id, cmid, contextid, steps_data);
        }
    };
});